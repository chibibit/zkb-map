{"version":3,"sources":["utils/scaling.ts","useKillmails.tsx","CameraControls.tsx","utils/theme.ts","utils/geometry.ts","Points.tsx","Stars.tsx","Flares.tsx","KillmailTicker.tsx","utils/formatting.ts","App.tsx","index.tsx","useSolarSytems.tsx","glow.png"],"names":["ageMultiplier","age","THREE","smoothstep","t","MAX_KILLMAIL_AGE_SEC","Math","pow","scaleValue","value","normalized","clamp","mapLinear","useMinViewportSize","useThree","size","height","width","min","subscribeMessage","JSON","stringify","reduceKillmails","state","action","type","payload","killmail_id","killmail_time","victim","solar_system_id","zkb","killmail","id","time","parseISO","receivedAt","Date","characterId","character_id","corporationId","corporation_id","allianceId","alliance_id","shipTypeId","ship_type_id","solarSystemId","url","totalValue","scaledValue","uniqBy","now","filter","differenceInSeconds","extend","OrbitControls","CameraControls","camera","domElement","gl","controls","useRef","useFrame","_state","current","update","ref","args","theme","background","colorMaxSec","colorMinSec","flare","text","ThemeContext","React","createContext","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","attributes","position","needsUpdate","flareColor","tempVector","positionToArray","target","index","x","y","z","toArray","flareTexture","load","glow","uniforms","color","pointTexture","Points","forwardRef","_props","attach","vertexShader","fragmentShader","blending","depthTest","transparent","memo","solarSystems","pointsRef","useContext","minViewportSize","useLayoutEffect","length","systemSize","solarSystem","lerp","security","killmails","baseFlareSize","colorFlare","differenceInMilliseconds","fade","keyframes","TickerContainer","styled","div","UNIT","EntryContainer","Data","ImageLink","a","area","Image","src","href","style","alt","KillmailEntry","name","billion","round","million","thousand","KillmailTicker","entries","map","km","key","Component","GlobalStyle","createGlobalStyle","reset","cameraConfig","near","far","props","sourceUrl","useReducer","dispatch","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","parse","data","close","useKillmails","useState","setSolarSystems","fetch","then","res","json","Object","r","s","n","parseInt","radius","useSolarSystems","killmailsRef","solarSystemLookup","useMemo","keyBy","Provider","onCreated","setClearColor","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.22635c4e.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\n\nexport const MAX_KILLMAIL_AGE_SEC = 60\n\nconst fullyVisibleMs = 500\nconst fullyInvisibleMs = MAX_KILLMAIL_AGE_SEC * 1000\n\nexport const ageMultiplier = (age: number): number => {\n  if (age < fullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, fullyVisibleMs)\n  } else {\n    const t = THREE.MathUtils.smoothstep(age, fullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 100_000_000_000\nconst minValueMultiplier = 0.5\nconst maxValueMultiplier = 15\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import { useEffect, useReducer } from 'react'\nimport parseISO from 'date-fns/parseISO'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport uniqBy from 'lodash/uniqBy'\nimport { scaleValue, MAX_KILLMAIL_AGE_SEC } from './utils/scaling'\n\nconst subscribeMessage = JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": \"killstream\"\n})\n\nconst decayIntervalMs = 10 * 1000\n\ntype UnparsedTimestamp = string\n\ninterface WebsocketKillmail {\n  killmail_id: number\n  killmail_time: UnparsedTimestamp\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\nexport interface Killmail {\n  id: number\n  time: Date\n  receivedAt: Date\n  characterId: number\n  corporationId: number\n  allianceId?: number\n  shipTypeId: number\n  solarSystemId: number\n  url: string\n  totalValue: number\n  scaledValue: number\n}\n\ntype ReceiveWebsocketAction = {\n  type: 'RECEIVE_WEBSOCKET'\n  payload: WebsocketKillmail\n}\n\ntype DecayAction = {\n  type: 'DECAY'\n}\n\ntype KillmailAction = ReceiveWebsocketAction | DecayAction\n\nfunction reduceKillmails(state: Killmail[], action: KillmailAction): Killmail[] {\n  // console.log(action)\n  switch (action.type) {\n    case 'RECEIVE_WEBSOCKET': {\n      const { killmail_id, killmail_time, victim, solar_system_id, zkb } = action.payload\n\n      const time = parseISO(killmail_time)\n\n      const killmail: Killmail = {\n        id: killmail_id,\n        time,\n        receivedAt: new Date(),\n        characterId: victim.character_id,\n        corporationId: victim.corporation_id,\n        allianceId: victim.alliance_id,\n        shipTypeId: victim.ship_type_id,\n        solarSystemId: solar_system_id,\n        url: zkb.url,\n        totalValue: zkb.totalValue,\n        scaledValue: scaleValue(zkb.totalValue)\n      }\n\n      return uniqBy([killmail, ...state], 'id')\n    }\n    case 'DECAY': {\n      const now = new Date()\n      return state.filter(killmail => differenceInSeconds(now, killmail.receivedAt) < MAX_KILLMAIL_AGE_SEC)\n    }\n    default:\n      return state\n  }\n}\n\nexport function useKillmails(props: { sourceUrl: string }): Killmail[] {\n  const { sourceUrl } = props\n  const [killmails, dispatch] = useReducer(reduceKillmails, [])\n\n  useEffect(() => {\n    const interval = setInterval(() => dispatch({ type: 'DECAY' }), decayIntervalMs)\n    return () => clearInterval(interval)\n  }, [dispatch])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage)\n    }\n\n    connection.onmessage = (e) => {\n      const killmail: WebsocketKillmail = JSON.parse(e.data)\n      dispatch({ type: 'RECEIVE_WEBSOCKET', payload: killmail })\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, dispatch])\n\n  return killmails\n}\n","import React, {  useRef } from 'react'\nimport { useFrame, extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nextend({ OrbitControls })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: React.DetailedHTMLProps<any, any>\n    }\n  }\n}\n\nexport const CameraControls: React.FC<{}> = () => {\n  const { camera, gl: { domElement } } = useThree()\n  const controls = useRef<OrbitControls>()\n  useFrame(_state => controls.current?.update())\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\n};\n","import React from 'react'\n\nexport const theme = {\n  background: '#060606',\n  colorMaxSec: '#2A9FD6',\n  colorMinSec: '#E6E6E6',\n  flare: '#E60000',\n  text: '#E6E6E6'\n}\n\nexport const ThemeContext = React.createContext(theme)\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\ninterface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef((_props, ref) => <points ref={ref as any}>\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import React, { useRef, useLayoutEffect, useContext } from 'react'\nimport { SolarSystem } from './useSolarSytems'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from './utils/theme'\nimport { useMinViewportSize } from './utils/scaling'\n\nconst viewportRelativeScale = 90\n\nconst Stars: React.FC<{\n  solarSystems: SolarSystem[]\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useLayoutEffect(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n\n    const count = solarSystems.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystems[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      new THREE.Color(theme.colorMinSec).lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  }, [solarSystems, solarSystems.length, theme, minViewportSize])\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Stars)\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport { SolarSystem } from './useSolarSytems'\nimport * as THREE from 'three'\nimport { Killmail } from './useKillmails'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ageMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from './utils/theme'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 5\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * scaledValue * ageMultiplier(age)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Flares)\n","import React from 'react'\nimport { Killmail } from './useKillmails'\nimport styled, { keyframes } from 'styled-components'\nimport { SolarSystem } from './useSolarSytems'\nimport { theme } from './utils/theme'\nimport { MAX_KILLMAIL_AGE_SEC } from './utils/scaling'\nimport { stringifyPrice } from './utils/formatting'\n\nconst UNIT = 32\n\n// 50%, because MAX_KILLMAIL_AGE_SEC is not a guaranteed removal\nconst fade = keyframes`\n  0% { opacity: 0; }\n  0.5% { opacity: 1; }\n  10% { opacity: 0.9; }\n  50% { opacity: 0; }\n  100% { opacity: 0; }\n`\n\nconst TickerContainer = styled.div`\n  position: absolute;\n  top: ${UNIT / 2}px;\n  left: ${UNIT / 2}px;\n  overflow: hidden;\n  max-height: calc(100vh - ${UNIT}px);\n`\n\nconst EntryContainer = styled.div`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\"\n                       \"ship data      data        data\";\n  grid-template-columns: ${UNIT * 2}px ${UNIT}px ${UNIT}px 1fr;\n  grid-template-rows: repeat(2, ${UNIT}px);\n  grid-gap: ${UNIT / 8}px;\n  animation: ${fade} ${MAX_KILLMAIL_AGE_SEC * 2}s linear;\n`\n\nconst Data = styled.div`\n  grid-area: data;\n  color: ${theme.text};\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  size: number\n  href?: string\n}> = ({ src, area, size, href }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <img\n      src={`${src}?size=${size}`}\n      style={{ height: size, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n  solarSystem: SolarSystem\n}> = ({ killmail, solarSystem }) => {\n  const { name } = solarSystem\n  const { characterId, corporationId, allianceId, shipTypeId, totalValue, url } = killmail\n\n  return <EntryContainer>\n    {shipTypeId && <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      size={UNIT * 2}\n      href={url}\n    />}\n    {characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      size={UNIT}\n      href={`https://zkillboard.com/character/${characterId}/`}\n    />}\n    {corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      size={UNIT}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n    />}\n    {allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      size={UNIT}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n    />}\n\n    <Data>\n      {stringifyPrice(totalValue)} @ {name}\n    </Data>\n  </EntryContainer>\n}\n\nconst KillmailTicker: React.FC<{\n  killmails: Killmail[]\n  solarSystems: Record<number, SolarSystem>\n}> = ({ killmails, solarSystems }) => {\n  const entries = killmails.map(km => {\n    const { id, solarSystemId } = km\n    const solarSystem = solarSystems[solarSystemId]\n\n    return solarSystem ? <KillmailEntry killmail={km} solarSystem={solarSystem} key={id} /> : null\n  })\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import round from 'lodash/round'\n\nconst thousand = 1_000\nconst million = thousand * thousand\nconst billion = million * thousand\nconst precision = 1\n\nconst displayBillionsFrom = billion / 2\nconst displayMillionsFrom = million / 2\n\nexport const stringifyPrice = (value: number): string => {\n  if (value > displayBillionsFrom) {\n    return `${round(value / billion, precision)}b`\n  } else if (value > displayMillionsFrom) {\n    return `${round(value / million, precision)}m`\n  } else {\n    return `${round(value / thousand, precision)}k`\n  }\n}\n","import React, { useRef, useEffect, useMemo } from 'react'\nimport { useKillmails } from './useKillmails'\nimport { useSolarSystems } from './useSolarSytems'\nimport { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { CameraControls } from './CameraControls'\nimport { theme, ThemeContext } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport { Stats } from 'drei'\nimport keyBy from 'lodash/keyBy'\nimport KillmailTicker from './KillmailTicker'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${theme.background};\n    overflow: hidden;\n  }\n`\n\nconst cameraConfig  = {\n  position: new THREE.Vector3(0, 0, 1_000),\n  near: 0.001,\n  far: 10_000\n}\n\nconst App: React.FC<{}> = () => {\n  const sourceUrl = 'wss://zkillboard.com/websocket/'\n  const killmails = useKillmails({ sourceUrl })\n  const solarSystems = useSolarSystems()\n  const killmailsRef = useRef<typeof killmails>([])\n\n  const solarSystemLookup = useMemo(() => keyBy(solarSystems, 'id'), [solarSystems])\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <ThemeContext.Provider value={theme}>\n    <GlobalStyle />\n\n    <Canvas camera={cameraConfig} onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n      {/* <Stats /> */}\n\n      <ambientLight />\n\n      <Stars solarSystems={solarSystems} />\n      <Flares solarSystems={solarSystemLookup} killmails={killmailsRef} />\n\n      <CameraControls />\n    </Canvas>\n\n    <KillmailTicker killmails={killmails} solarSystems={solarSystemLookup} />\n  </ThemeContext.Provider>\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Component />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    render(NextApp)\n  })\n}\n","import { useEffect, useState } from 'react'\n\nexport interface SolarSystem {\n  id: number\n  name: string\n  x: number\n  y: number\n  z: number\n  radius: number\n  security: number\n}\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n}\n\nexport function useSolarSystems(): SolarSystem[] {\n  const [solarSystems, setSolarSystems] = useState<SolarSystem[]>([])\n\n  useEffect(() => {\n    fetch('data/solarSystems.json').then(res => res.json()).then((data: Record<string, RawSolarSystem>) => {\n      const solarSystems = Object.entries(data).map(([id, { x, y, z, r, s, n }]) => {\n        return {\n          id: parseInt(id),\n          x,\n          y: z,\n          z: y,\n          name: n,\n          radius: r,\n          security: s\n        } as SolarSystem\n      })\n\n      setSolarSystems(solarSystems)\n    })\n  }, [])\n\n  return solarSystems\n}\n","module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";"],"sourceRoot":""}
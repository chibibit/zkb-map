{"version":3,"sources":["glow.png","hooks/configuration.ts","utils/theme.ts","utils/geometry.ts","Points.tsx","hooks/connection.ts","hooks/killmails.ts","utils/scaling.ts","Stars.tsx","Flares.tsx","hooks/solarSystems.ts","KillmailTicker.tsx","DevTools.tsx","Controls.tsx","Camera.tsx","Effects.tsx","FocusIndicator.tsx","utils/formatting.ts","App.tsx","utils/fontawesome.ts","index.tsx"],"names":["module","exports","CameraMode","theme","background","colorMaxSec","colorMinSec","flare","text","unit","gapSize","regionFontSize","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","THREE","attributes","position","needsUpdate","flareColor","size","tempVector","positionToArray","target","index","x","y","z","toArray","flareTexture","load","glow","uniforms","color","value","pointTexture","Points","forwardRef","props","ref","attach","vertexShader","fragmentShader","blending","depthTest","transparent","useConnection","create","set","connected","pingReceived","undefined","receivePing","Date","checkConnection","differenceInMilliseconds","shouldKeep","now","killmail","scaledValue","receivedAt","subscribeMessage","channel","JSON","stringify","useKillmails","killmails","focused","receiveKillmail","state","id","trimKillmails","shouldKeepNow","bind","pickBy","changes","focus","unfocus","useKillmailMonitor","sourceUrl","useCallback","useState","uniqueId","connectionRequest","setConnectionRequest","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","parsed","parse","data","raw","killmail_id","killmail_time","victim","solar_system_id","zkb","character_id","corporation_id","alliance_id","ship_type_id","url","totalValue","time","parseISO","characterId","corporationId","allianceId","shipTypeId","solarSystemId","scaleValue","parseKillmail","console","error","onclose","code","setTimeout","close","effectiveMultiplier","age","scale","smoothstep","fullyInvisibleMs","t","Math","pow","ageMultiplier","normalized","clamp","mapLinear","useMinViewportSize","useThree","height","width","min","Stars","solarSystems","pointsRef","useRef","clockTime","useContext","ThemeContext","minViewportSize","useFrame","_ctx","delta","current","solarSystemArray","Object","values","length","systemSize","solarSystem","twikleScale","sin","lerp","security","addScalar","radius","Flares","baseFlareSize","colorFlare","useConfiguration","cameraMode","full","extendedTicker","setCameraMode","mode","toggleExtendedTicker","useSolarSystems","systems","regions","loaded","receive","reduce","region","n","parseInt","name","system","r","s","p","regionId","regionName","selectLoaded","selectReceive","TickerContainer","styled","div","EntryContainer","animated","ImageLink","a","area","Image","src","href","img","style","alt","KillmailEntry","memo","useSpring","opacity","paddingBottom","isFocused","isActive","subscribe","animate","duration","multiplier","config","extended","onMouseEnter","onMouseLeave","gridAutoRows","KillmailTicker","entries","map","km","key","getTime","Container","FlatButton","button","onClick","OnOffIcon","enabled","other","className","icon","FullscreenToggle","fullScreen","setFullScreen","listener","document","fullscreenElement","addEventListener","removeEventListener","type","title","exitFullscreen","getElementById","requestFullscreen","ConnectionStatus","cameraIcon","follow","nextCameraModes","cameraTitles","CameraStatus","update","ExtendedTicker","toggle","Controls","defaultPosition","minRadius","Camera","React","points","computeBoundingSphere","boundingSphere","center","max","lookAtPoints","maxX","Infinity","maxY","maxZ","minX","minY","minZ","totalX","totalY","totalZ","totalScale","scaledX","scaledY","scaledZ","clone","aspect","multiply","makeDefault","near","far","fov","multisampling","gl","capabilities","maxTextureSize","luminanceThreshold","luminanceSmoothing","intensity","eskil","offset","darkness","focusedKillmail","focusedSolarSystem","lineRef","valueTextRef","locationTextRef","camera","textMaterial","useMemo","valueText","locatioText","textX","textY","textZ","textAnchorX","textSize","cameraX","cameraY","cameraZOffset","lineOffset","offsetX","xStart","yStart","zStart","xHorizontalStart","xHorizontalEnd","yHorizontal","zHorizontal","billion","round","million","thousand","material","valueTextObject","anchorX","fontSize","locationTextObject","children","anchorY","GlobalStyle","createGlobalStyle","reset","TopLeft","TopRight","Visuals","onCreated","setClearColor","Provider","App","abortController","AbortController","fetch","signal","then","res","json","abort","useSolarSystemData","process","useConnectionStatus","killmailsRef","inCurrentSystems","arr","push","sortBy","reverse","library","add","faCompressArrowsAlt","faExpandArrowsAlt","faWifi","faVideo","faGlobe","faList","faSlash","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a28286fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";","import create from 'zustand'\n\nexport enum CameraMode {\n  full,\n  follow\n}\n\ntype State = {\n  cameraMode: CameraMode,\n  extendedTicker: boolean,\n  setCameraMode: (mode: CameraMode) => void,\n  toggleExtendedTicker: () => void\n}\n\nexport const useConfiguration = create<State>(set => ({\n  cameraMode: CameraMode.full,\n  extendedTicker: true,\n  setCameraMode: (mode) => set({ cameraMode: mode }),\n  toggleExtendedTicker: () => set(state => ({ extendedTicker: !state.extendedTicker }))\n}))\n","export const theme = {\n  background: '#060606',\n  colorMaxSec: '#66A0BC',\n  colorMinSec: '#a1a1a1',\n  flare: '#E60000',\n  text: '#E6E6E6',\n  unit: 32,\n  gapSize: 8,\n  regionFontSize: 8\n}\n\nexport type Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\nexport interface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef<THREE.Points<THREE.BufferGeometry>>((props, ref) => <points ref={ref} {...props} >\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect } from 'react'\nimport create from 'zustand'\n\nconst normalIntervalBetweenPingsMs = 15 * 1000\nconst checkInterval = 5 * 1000\n\ntype State = {\n  connected: boolean,\n  pingReceived?: Date,\n  receivePing: () => void,\n  checkConnection: () => void\n}\n\nexport const useConnection = create<State>(set => ({\n  connected: false,\n  pingReceived: undefined,\n  receivePing: () => set({ connected: true, pingReceived: new Date() }),\n  checkConnection: () => set(({ pingReceived }) => {\n    const connected = pingReceived ? differenceInMilliseconds(new Date(), pingReceived) < normalIntervalBetweenPingsMs : false\n    return { connected }\n  })\n}))\n\nexport const useConnectionStatus = () => {\n  const checkConnection = useConnection(useCallback(state => state.checkConnection, []))\n\n  useEffect(() => {\n    const interval = setInterval(checkConnection, checkInterval)\n    return () => clearInterval(interval)\n  }, [checkConnection])\n}\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect, useState } from 'react'\nimport pickBy from 'lodash/pickBy'\nimport create from 'zustand'\nimport parseISO from 'date-fns/parseISO'\nimport { scaleValue } from '../utils/scaling'\nimport { useConnection } from './connection'\nimport uniqueId from 'lodash/uniqueId'\n\nexport const normalKillmailAgeMs = 45 * 1000\nconst trimIntervalMs = 5 * 1000\nconst normalCloseCode = 1000\nconst reconnectIntervalMs = trimIntervalMs\n\ntype WebsocketStatusMessage = {\n  action: 'tqStatus'\n  tqStatus: string\n  tqCount: string\n  kills: string\n}\n\ntype WebsocketKillmail = {\n  killmail_id: number\n  killmail_time: string\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\ntype WebsocketMessage = WebsocketKillmail | WebsocketStatusMessage\n\ntype State = {\n  killmails: Record<string, Killmail>,\n  focused?: Killmail,\n  receiveKillmail: (killmail: Killmail) => void,\n  trimKillmails: () => void,\n  focus: (id: Killmail['id']) => void,\n  unfocus: (id: Killmail['id']) => void\n}\n\nconst shouldKeep = (now: Date, killmail: Killmail) => {\n  const { scaledValue, receivedAt } = killmail\n  const age = differenceInMilliseconds(now, receivedAt)\n  return age < normalKillmailAgeMs * scaledValue\n}\n\nconst subscribeMessage = (channel: string) => JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": channel\n})\n\nconst parseKillmail = (raw: WebsocketKillmail): Killmail => {\n  const { killmail_id, killmail_time, victim, solar_system_id, zkb } = raw\n  const { character_id, corporation_id, alliance_id, ship_type_id } = victim\n  const { url, totalValue } = zkb\n  const time = parseISO(killmail_time)\n\n  return {\n    id: killmail_id,\n    time,\n    receivedAt: new Date(),\n    characterId: character_id,\n    corporationId: corporation_id,\n    allianceId: alliance_id,\n    shipTypeId: ship_type_id,\n    solarSystemId: solar_system_id,\n    url,\n    totalValue,\n    scaledValue: scaleValue(totalValue)\n  }\n}\n\nexport const useKillmails = create<State>(set => ({\n  killmails: {},\n  focused: undefined,\n  receiveKillmail: (killmail) => { set(state => ({ killmails: { ...state.killmails, [killmail.id]: killmail } })) },\n  trimKillmails: () => {\n    const shouldKeepNow = shouldKeep.bind(undefined, new Date())\n    set(state => {\n      const killmails = pickBy(state.killmails, shouldKeepNow)\n      const changes: Partial<State> = { killmails }\n      if (state.focused && !killmails[state.focused.id]) {\n        changes.focused = undefined\n      }\n      return changes\n    })\n  },\n  focus: (id) => { set(state => ({ focused: state.killmails[id] })) },\n  unfocus: (id) => { set(state => state.focused && state.focused.id === id ? { focused: undefined } : {}) }\n}))\n\nexport const useKillmailMonitor = (sourceUrl: string): void => {\n  const receivePing = useConnection(useCallback(state => state.receivePing, []))\n  const trimKillmails = useKillmails(useCallback(state => state.trimKillmails, []))\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n  const [connectionRequest, setConnectionRequest] = useState(uniqueId(sourceUrl))\n\n  useEffect(() => {\n    const interval = setInterval(trimKillmails, trimIntervalMs)\n    return () => clearInterval(interval)\n  }, [trimKillmails])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage('killstream'))\n      connection.send(subscribeMessage('public'))\n    }\n\n    connection.onmessage = (e) => {\n      const parsed: WebsocketMessage = JSON.parse(e.data)\n\n      if ('killmail_id' in parsed) {\n        receiveKillmail(parseKillmail(parsed))\n      } else if ('tqStatus' in parsed) {\n        receivePing()\n      } else {\n        console.error(parsed)\n      }\n    }\n\n    connection.onclose = ({ code }) => {\n      if (code !== normalCloseCode) {\n        // unless the connection was closed by hook exiting, trigger reconnect by resetting effect param\n        setTimeout(() => {\n          setConnectionRequest(uniqueId(sourceUrl))\n        }, reconnectIntervalMs)\n      }\n    }\n\n    return () => connection.close(normalCloseCode)\n  }, [sourceUrl, receiveKillmail, receivePing, connectionRequest])\n}\n","import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\nimport { normalKillmailAgeMs } from '../hooks/killmails'\n\nexport const killmailFullyVisibleMs = 500\n\nexport const ageMultiplier = (age: number, scale: number): number => {\n  if (age < killmailFullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, killmailFullyVisibleMs)\n  } else {\n    const fullyInvisibleMs = normalKillmailAgeMs * scale\n    const t = THREE.MathUtils.smoothstep(age, killmailFullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nexport const effectiveMultiplier = (age: number, scale: number): number => {\n  return scale * ageMultiplier(age, scale)\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 20_000_000_000\nconst minValueMultiplier = 1\nconst maxValueMultiplier = 10\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import React, { useRef, useContext } from 'react'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\nimport { useMinViewportSize } from './utils/scaling'\nimport { useFrame } from 'react-three-fiber'\n\nconst viewportRelativeScale = 70\nconst clockWarparound = 60 * 60 * 1000\nconst twinkleSpeed = 0.75\n\nconst Stars: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points<THREE.BufferGeometry>>(null)\n  const clockTime = useRef(0)\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame((_ctx, delta) => {\n    clockTime.current = (clockTime.current + delta) % clockWarparound\n\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n    const solarSystemArray = Object.values(solarSystems)\n\n    const count = solarSystemArray.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystemArray[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      const twikleScale = THREE.MathUtils.clamp(\n        -1 + Math.sin((clockTime.current + index) * twinkleSpeed) * 2,\n        0,\n        1\n      )\n\n      new THREE.Color(theme.colorMinSec).lerp(\n        colorMaxSec, solarSystem.security\n      ).addScalar(\n        twikleScale\n      ).toArray(colors, index * 3)\n\n      scales[index] = systemSize * solarSystem.radius\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Stars\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { effectiveMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points<THREE.BufferGeometry>>(null)\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 8\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * effectiveMultiplier(age, scaledValue)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Flares\n","import create from 'zustand'\nimport reduce from 'lodash/reduce'\nimport { useEffect } from 'react'\nimport * as THREE from 'three'\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n  p: number\n}\n\ninterface RawRegion {\n  x: number\n  y: number\n  z: number\n  n: string\n}\n\ntype UniverseApiResponse = {\n  systems: Record<string, RawSolarSystem>,\n  regions: Record<string, RawRegion>\n}\n\ntype State = {\n  systems: Record<string, SolarSystem>,\n  regions: Record<string, Region>,\n  loaded: boolean,\n  receive: (data: UniverseApiResponse) => void\n}\n\nexport const useSolarSystems = create<State>(set => ({\n  systems: {},\n  regions: {},\n  loaded: false,\n  receive: (data: UniverseApiResponse) => {\n    const regions = reduce(data.regions, (state, region, id) => {\n      const { x, y, z, n } = region\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n\n      }\n      return state\n    }, {} as Record<string, Region>)\n\n    const systems = reduce(data.systems, (state, system, id) => {\n      const { x, y, z, n, r, s, p } = system\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n,\n        radius: THREE.MathUtils.clamp(r * 100, 0.5, 1.5),\n        security: s,\n        regionId: p,\n        regionName: regions[p]?.name\n      }\n      return state\n    }, {} as Record<string, SolarSystem>)\n\n    set({ regions, systems, loaded: true })\n  }\n}))\n\nconst selectLoaded = (state: State) => state.loaded\nconst selectReceive = (state: State) => state.receive\n\nexport const useSolarSystemData = (sourceUrl: string): void => {\n  const loaded = useSolarSystems(selectLoaded)\n  const receive = useSolarSystems(selectReceive)\n\n  useEffect(() => {\n    if (!loaded) {\n      const abortController = new AbortController()\n\n      fetch(sourceUrl, { signal: abortController.signal }).then(res => res.json()).then(receive)\n\n      return () => abortController.abort()\n    }\n  }, [sourceUrl, loaded, receive])\n}\n","import React, { useCallback, useContext, useEffect, memo, useRef } from 'react'\nimport styled from 'styled-components'\nimport { effectiveMultiplier, killmailFullyVisibleMs } from './utils/scaling'\nimport { animated, useSpring, OpaqueInterpolation } from 'react-spring'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ThemeContext } from 'styled-components'\nimport * as THREE from 'three'\nimport { useKillmails, useConfiguration } from './hooks'\n\nconst TickerContainer = styled.div`\n  overflow: hidden;\n  max-height: calc(100vh - ${({ theme }) => theme.unit}px);\n  display: flex;\n  flex-flow: column;\n`\n\nconst EntryContainer = styled(animated.div)`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  padding-bottom: ${({ theme }) => theme.gapSize}px;\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n\n  > img {\n    border-radius: ${({ theme }) => theme.gapSize / 2}px;\n  }\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  height: OpaqueInterpolation<any>\n  href?: string,\n  size: number\n}> = ({ src, area, href, height, size }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <animated.img\n      src={`${src}?size=${size}`}\n      style={{ height, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst animationStepNormal = 1000\nconst animationStepFast = 250\nconst animationStepInstant = 50\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n}> = memo(({ killmail }) => {\n  const { unit } = useContext(ThemeContext)\n  const { id, characterId, corporationId, allianceId, shipTypeId, url, receivedAt, scaledValue } = killmail\n\n  const [{ height, paddingBottom, opacity }, set] = useSpring(() => ({ opacity: 0, height: 0, paddingBottom: 0 }))\n\n  const isFocused = useRef(false)\n  const isActive = useRef(true)\n  useEffect(() => useKillmails.subscribe(state => {\n    isFocused.current = state.focused ? state.focused.id === id : false\n  }))\n\n  useEffect(() => {\n    const animate = () => {\n      const age = differenceInMilliseconds(new Date(), receivedAt)\n      let opacity: number\n      let height = unit\n      let paddingBottom = unit / 8\n      let duration = animationStepNormal\n\n      if (age < killmailFullyVisibleMs) { // very new, fade in animation\n        opacity = 1\n        duration = animationStepFast\n      } else {\n        const multiplier = effectiveMultiplier(age, scaledValue)\n        if (multiplier > 0.1) { // reasonably new, keep visible\n          if (isFocused.current) { // is being hovered - keep max brightness\n            opacity = 1\n          } else { // slowly fade out as multiplier drops\n            opacity = THREE.MathUtils.clamp(multiplier, 0, 1)\n          }\n        } else { // old, fade it out\n          opacity = 0\n          height = 0\n          paddingBottom = 0\n          duration = animationStepFast\n        }\n      }\n\n      isActive.current = opacity > 0\n\n      set({ opacity, height, paddingBottom, config: { duration } })\n    }\n\n    const interval = setInterval(animate, animationStepNormal)\n    animate()\n    return () => clearInterval(interval)\n  }, [set, receivedAt, scaledValue, unit])\n\n  const focus = useKillmails(useCallback(state => state.focus, []))\n  const unfocus = useKillmails(useCallback(state => state.unfocus, []))\n\n  const extended = useConfiguration(useCallback(state => state.extendedTicker, []))\n\n  const onMouseEnter = useCallback(() => {\n    set({ opacity: 1, config: { duration: animationStepInstant } })\n\n    if (isActive.current) {\n      focus(id)\n    }\n  }, [focus, id, set])\n  const onMouseLeave = useCallback(() => unfocus(id), [unfocus, id])\n\n  return <EntryContainer style={{ opacity, paddingBottom, gridAutoRows: height }} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n    <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      height={height}\n      href={url}\n      size={unit}\n    />\n    {extended && characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      height={height}\n      href={`https://zkillboard.com/character/${characterId}/`}\n      size={unit}\n    />}\n    {extended && corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      height={height}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n      size={unit}\n    />}\n    {extended && allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      height={height}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n      size={unit}\n    />}\n  </EntryContainer>\n})\n\nconst KillmailTicker: React.FC<{\n  killmails: Killmail[]\n}> = ({ killmails }) => {\n  const entries = killmails.map(km => <KillmailEntry killmail={km} key={km.id} />)\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useSolarSystems, useKillmails } from './hooks'\nimport { Stats } from 'drei'\nimport random from 'lodash/random'\nimport sample from 'lodash/sample'\nimport { scaleValue } from './utils/scaling'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  flex-flow: column;\n  gap: 1vh;\n`\n\nconst minValue = 10_000\nconst maxValue = 10_000_000_000\n\nlet testId = new Date().getTime()\nconst buildTestKillmail = (value: number, solarSystemId: string) => {\n  testId += 1\n\n  const now = new Date()\n\n  return {\n    id: testId,\n    time: now,\n    receivedAt: now,\n    characterId: 90230071,\n    corporationId: 98076155,\n    allianceId: 99007254,\n    shipTypeId: 22456,\n    solarSystemId: parseInt(solarSystemId),\n    url: 'https://example.com',\n    totalValue: value,\n    scaledValue: scaleValue(value)\n  }\n}\n\nconst DevTools: React.FC<{}> = () => {\n  const statsContainer = useRef(null)\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n  const [activityInterval, setAcitivtyInterval] = useState(1000)\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n\n  const randomSolarSystemId = useCallback(() => sample(Object.keys(solarSystems)) as string, [solarSystems])\n\n  const [statsOn, setStatsOn] = useState(false)\n\n  const [activityOn, setActivityOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (activityOn) {\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 90 ? maxValue : minValue * 1000\n        const id = randomSolarSystemId()\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [activityOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  const [oneSystemFightOn, setOneSystemFightOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (oneSystemFightOn) {\n      const id = randomSolarSystemId()\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 70 ? maxValue : minValue * 1000\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [oneSystemFightOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  return <Container>\n    <label>\n      <input type='checkbox' checked={statsOn} onChange={() => setStatsOn(!statsOn)} />\n      Show FPS\n    </label>\n    <div ref={statsContainer}></div>\n    {statsOn && <Stats parent={statsContainer} />}\n\n    <label>\n      <input type='range' min={500} max={30000} value={activityInterval} onChange={({ target: { value } }) => setAcitivtyInterval(parseInt(value)) }/>\n      <div>\n        Activity interval: {activityInterval}\n      </div>\n    </label>\n\n    <label>\n      <input type='checkbox' checked={activityOn} onChange={() => setActivityOn(!activityOn)} />\n      Constant random activity\n    </label>\n\n    <label>\n      <input type='checkbox' checked={oneSystemFightOn} onChange={() => setOneSystemFightOn(!oneSystemFightOn)} />\n      One system activity\n    </label>\n\n    <button onClick={() => receiveKillmail(buildTestKillmail(random(maxValue / 10, maxValue), randomSolarSystemId()))}>\n      Big boom\n    </button>\n  </Container>\n}\n\nexport default DevTools\n","import React, { useState, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useConnection, useConfiguration } from './hooks'\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'\nimport { CameraMode } from './hooks/configuration'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: grid;\n  grid-template-areas: \"fullscreen connection camera sidebar\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  direction: rtl;\n`\n\nconst FlatButton = styled.button<{ area: string }>`\n  color: ${({ theme }) => theme.text};\n  background: transparent;\n  border: none;\n  grid-area: ${({ area }) => area};\n  cursor: ${({ onClick }) => onClick ? 'pointer' : 'default'};\n  outline: none;\n`\n\nconst OnOffIcon: React.FC<FontAwesomeIconProps & { enabled: boolean }> = ({ enabled, ...other }) => {\n  return <span className=\"fa-layers fa-fw\">\n    <FontAwesomeIcon {...other} />\n    {!enabled && <FontAwesomeIcon icon='slash' />}\n  </span>\n}\n\nconst FullscreenToggle: React.FC = () => {\n  const [fullScreen, setFullScreen] = useState(false)\n\n  useEffect(() => {\n    const listener = () => setFullScreen(!!document.fullscreenElement)\n    document.addEventListener('fullscreenchange', listener)\n    return () => document.removeEventListener('fullscreenchange', listener)\n  }, [setFullScreen])\n\n  const onClick = () => {\n    if (fullScreen) {\n      document.exitFullscreen()\n    } else {\n      document.getElementById('root')?.requestFullscreen()\n    }\n  }\n\n  return <FlatButton type='button' title={fullScreen ? 'Exit fullscreen' : 'Go fullscreen'} onClick={onClick} area='fullscreen'>\n    <FontAwesomeIcon icon={fullScreen ? 'compress-arrows-alt' : 'expand-arrows-alt'} />\n  </FlatButton>\n}\n\nconst ConnectionStatus: React.FC = () => {\n  const connected = useConnection(useCallback(state => state.connected, []))\n\n  return <FlatButton type='button' title={connected ? 'Connected to live feed' : 'Disconnected from live feed!'} area='connection'>\n    <OnOffIcon icon='wifi' enabled={connected} />\n  </FlatButton>\n}\n\nconst cameraIcon: Record<CameraMode, FontAwesomeIconProps['icon']> = {\n  [CameraMode.full]: 'globe',\n  [CameraMode.follow]: 'video'\n}\n\nconst nextCameraModes: Record<CameraMode, CameraMode> = {\n  [CameraMode.full]: CameraMode.follow,\n  [CameraMode.follow]: CameraMode.full\n}\n\nconst cameraTitles: Record<CameraMode, string> = {\n  [CameraMode.full]: 'Camera: whole map',\n  [CameraMode.follow]: 'Camera: follow the action'\n}\n\nconst CameraStatus: React.FC = () => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const update = useConfiguration(useCallback(state => state.setCameraMode, []))\n\n  const onClick = () => {\n    const nextCameraMode = nextCameraModes[mode]\n    update(nextCameraMode)\n  }\n\n  return <FlatButton type='button' title={cameraTitles[mode]} onClick={onClick} area='camera'>\n    <FontAwesomeIcon icon={cameraIcon[mode]} />\n  </FlatButton>\n}\n\nconst ExtendedTicker: React.FC = () => {\n  const enabled = useConfiguration(useCallback(state => state.extendedTicker, []))\n  const toggle = useConfiguration(useCallback(state => state.toggleExtendedTicker, []))\n\n  return <FlatButton type='button' title={enabled ? 'Sidebar: full information' : 'Sidebar: only the ship'} onClick={toggle} area='sidebar'>\n    <OnOffIcon icon='list' enabled={enabled} />\n  </FlatButton>\n}\n\nconst Controls: React.FC = () => {\n  return <Container>\n    <FullscreenToggle />\n    <ConnectionStatus />\n    <CameraStatus />\n    <ExtendedTicker />\n  </Container>\n}\n\nexport default Controls\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { PerspectiveCamera } from 'drei'\nimport * as THREE from 'three'\nimport { CameraMode } from './hooks/configuration'\nimport { positionToArray, HasPosition } from './utils/geometry'\nimport { useFrame } from 'react-three-fiber'\nimport { effectiveMultiplier } from './utils/scaling'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useConfiguration } from './hooks'\n\nconst near = 0.001\nconst far = 100_000\nconst fov = 90\n\nconst defaultPosition = new THREE.Vector3(0, 0, 700)\n\nconst minRadius = defaultPosition.z / 3\nconst movementMultiplier = 0.01\n\nconst lookAtPoints = (points: HasPosition[]): THREE.Vector3 => {\n  const count = points.length\n\n  const positions = new Float32Array(count * 3)\n\n  for (let index = 0; index < count; index++) {\n    positionToArray(points[index], positions, index)\n  }\n\n  const geometry = new THREE.BufferGeometry()\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n  geometry.computeBoundingSphere()\n  if (geometry.boundingSphere) {\n    const { center, radius } = geometry.boundingSphere\n\n    center.z += Math.max(radius, minRadius)\n    return center\n  } else {\n    return defaultPosition\n  }\n}\n\nconst Camera: React.FC<{\n  solarSystems: Record<string, SolarSystem>,\n  killmails: React.MutableRefObject<Killmail[]>\n}> = React.memo(({ solarSystems, killmails }) => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const ref = useRef<THREE.PerspectiveCamera>()\n  const position = useRef(defaultPosition)\n\n  useEffect(() => {\n    const solarSystemArray = Object.values(solarSystems)\n    if (solarSystemArray.length > 0) {\n      position.current = lookAtPoints(solarSystemArray)\n      if (ref.current) {\n        ref.current.position.lerp(position.current, 1)\n      }\n    }\n  }, [solarSystems])\n\n  useFrame(() => {\n    if (ref.current && position.current) {\n      let target: THREE.Vector3\n\n      const count = killmails.current?.length || 0\n\n      if (count > 0 && mode === CameraMode.follow) {\n        const now = new Date()\n\n        let maxX = -Infinity\n        let maxY = -Infinity\n        let maxZ = -Infinity\n\n        let minX = +Infinity\n        let minY = +Infinity\n        let minZ = +Infinity\n\n        let totalX = 0\n        let totalY = 0\n        let totalZ = 0\n\n        let totalScale = 0\n\n        for (let index = 0; index < count; index++) {\n          const { solarSystemId, scaledValue, receivedAt } = killmails.current[index]\n          const { x, y, z } = solarSystems[solarSystemId]\n\n          const age = differenceInMilliseconds(now, receivedAt)\n          const scale = effectiveMultiplier(age, scaledValue)\n\n          if (scale > 0.1) {\n            const scaledX = scale * x\n            const scaledY = scale * y\n            const scaledZ = scale * z\n\n            maxX = Math.max(maxX, x)\n            maxY = Math.max(maxY, y)\n            maxZ = Math.max(maxZ, z)\n\n            minX = Math.min(minX, x)\n            minY = Math.min(minY, y)\n            minZ = Math.min(minZ, z)\n\n            totalX += scaledX\n            totalY += scaledY\n            totalZ += scaledZ\n\n            totalScale += scale\n          }\n        }\n\n        if (totalScale > 0) {\n          const x = totalX / totalScale\n          const y = totalY / totalScale\n          const z = totalZ / totalScale\n\n          const radius = Math.max(\n            maxX - x,\n            maxY - y,\n            maxZ - z,\n            x - minX,\n            y - minY,\n            z - minZ,\n            minRadius\n          )\n\n          target = new THREE.Vector3(x, y, z + radius * 1.1)\n        } else {\n          target = position.current.clone()\n        }\n      } else {\n        target = position.current.clone()\n      }\n\n      if (ref.current.aspect < 1) {\n        // for taller-than-wider screens, the default fitment doesn't work. so we \"zoom out\" by scaling along z axis\n        target.multiply(new THREE.Vector3(1, 1, 1 / ref.current.aspect))\n      }\n\n      ref.current.position.lerp(target, movementMultiplier)\n    }\n  })\n\n  return <>\n    <PerspectiveCamera\n      ref={ref}\n      makeDefault\n      near={near}\n      far={far}\n      fov={fov}\n    />\n  </>\n})\n\nexport default Camera\n","import React, { memo} from 'react'\nimport { EffectComposer, Bloom, Noise, Vignette } from 'react-postprocessing'\nimport { useThree } from 'react-three-fiber'\n\nconst Effects: React.FC = () => {\n  const { gl } = useThree()\n  // Multisampling kills WebGL renderer on low power devices. This seems to be reasonable way of detection.\n  const multisampling = gl.capabilities.maxTextureSize > 8192 ? 8 : 0\n\n  return <EffectComposer multisampling={multisampling}>\n    <Bloom luminanceThreshold={0.4} luminanceSmoothing={1} intensity={2} />\n    <Noise opacity={0.04} />\n    <Vignette eskil={false} offset={0.1} darkness={1.1} />\n  </EffectComposer>\n}\n\nexport default memo(Effects)\n","import React, { memo, useCallback, useContext, useEffect, useRef, useMemo } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { useKillmails, useSolarSystems } from './hooks'\nimport * as THREE from 'three'\nimport { ThemeContext } from 'styled-components'\nimport { Text } from 'drei'\nimport { stringifyPrice } from './utils/formatting'\n\ntype TSThinksThisIsSvgLineTodoFix = any\n\ninterface TroikaTextObject {\n  text: string\n  position: THREE.Vector3\n  anchorX: number | 'left' | 'center' | 'right'\n  anchorY: number | 'top' | 'top-baseline' | 'middle' | 'bottom-baseline' | 'bottom'\n  fontSize: number\n  geometry: THREE.InstancedBufferGeometry\n}\n\nconst FocusIndicator: React.FC = () => {\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n  const focusedKillmail = useRef<Killmail>()\n  const focusedSolarSystem = useRef<SolarSystem>()\n  const theme = useContext(ThemeContext)\n  const lineRef = useRef<THREE.Line<THREE.BufferGeometry>>(null)\n  const valueTextRef = useRef<TroikaTextObject>(null)\n  const locationTextRef = useRef<TroikaTextObject>(null)\n\n  const { camera } = useThree()\n\n  useEffect(() => useKillmails.subscribe(state => {\n    focusedKillmail.current = state.focused\n    focusedSolarSystem.current = state.focused ? solarSystems[state.focused.solarSystemId] : undefined\n  }))\n\n  const textMaterial = useMemo(() => {\n    return new THREE.MeshBasicMaterial({ color: theme.text, depthTest: false })\n  }, [theme.text])\n\n  useFrame(() => {\n    let positions = new Float32Array(0)\n    let valueText = ''\n    let locatioText = ''\n    let textX = 0\n    let textY = 0\n    let textZ = 0\n    let textAnchorX: TroikaTextObject['anchorX'] = 'left'\n    let textSize = 0\n\n    if (focusedKillmail.current && focusedSolarSystem.current ) {\n      const { totalValue } = focusedKillmail.current\n      const { x, y, z, name, regionName } = focusedSolarSystem.current\n      const { x: cameraX, y: cameraY, z: cameraZ } = camera.position\n\n      const cameraZOffset = cameraZ - z\n\n      const lineOffset = cameraZOffset / 40\n\n      const offsetX = x > cameraX ? -lineOffset : lineOffset\n      const offsetY = y > cameraY ? -lineOffset : lineOffset\n\n      const offsetZ = lineOffset / 10\n\n      const xStart = x\n      const yStart = y\n      const zStart = z\n\n      const xHorizontalStart = xStart + offsetX * 5\n      const xHorizontalEnd = xHorizontalStart + offsetX * 5\n\n      const yHorizontal = yStart + offsetY * 3\n      const zHorizontal = zStart + offsetZ * 3\n\n      locatioText = `${name}, ${regionName}`\n      valueText = stringifyPrice(totalValue)\n\n      textX = xHorizontalStart\n      textY = yHorizontal\n      textZ = zHorizontal\n      textAnchorX = offsetX > 0 ? 'left' : 'right'\n      textSize = cameraZOffset / 30\n\n      positions = new Float32Array([\n        xStart, yStart, zStart,\n        xHorizontalStart, yHorizontal, zHorizontal,\n        xHorizontalEnd, yHorizontal, zHorizontal\n      ])\n    }\n\n    if (lineRef.current) {\n      const { geometry } = lineRef.current\n\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.attributes.position.needsUpdate = true\n\n      lineRef.current.material = textMaterial\n    }\n\n    if (valueTextRef.current && locationTextRef.current) {\n      const valueTextObject = valueTextRef.current\n      valueTextObject.text = valueText\n      valueTextObject.position.set(textX, textY, textZ)\n      valueTextObject.anchorX = textAnchorX\n      valueTextObject.fontSize = textSize\n\n      const locationTextObject = locationTextRef.current\n      locationTextObject.text = locatioText\n      locationTextObject.position.set(textX, textY, textZ)\n      locationTextObject.anchorX = textAnchorX\n      locationTextObject.fontSize = textSize * 0.75\n    }\n  })\n\n  return <group>\n    <line ref={lineRef as TSThinksThisIsSvgLineTodoFix}>\n      <bufferGeometry attach='geometry' />\n    </line>\n    <Text ref={valueTextRef} material={textMaterial} fontSize={0} children='' anchorY='top' />\n    <Text ref={locationTextRef} material={textMaterial} fontSize={0} children='' anchorY='bottom'/>\n  </group>\n}\n\nexport default memo(FocusIndicator)\n","import round from 'lodash/round'\n\nconst thousand = 1_000\nconst million = thousand * thousand\nconst billion = million * thousand\nconst precision = 1\n\nconst displayBillionsFrom = billion / 2\nconst displayMillionsFrom = million / 2\n\nexport const stringifyPrice = (value: number): string => {\n  if (value > displayBillionsFrom) {\n    return `${round(value / billion, precision)}b`\n  } else if (value > displayMillionsFrom) {\n    return `${round(value / million, precision)}m`\n  } else {\n    return `${round(value / thousand, precision)}k`\n  }\n}\n","import React, { useRef, useEffect, useCallback, memo } from 'react'\nimport styled, { createGlobalStyle, ThemeProvider, ThemeContext } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport { theme } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport KillmailTicker from './KillmailTicker'\nimport { useKillmails, useSolarSystems, useConnectionStatus, useKillmailMonitor, useSolarSystemData } from './hooks'\nimport DevTools from './DevTools'\nimport Controls from './Controls'\nimport Camera from './Camera'\nimport sortBy from 'lodash/sortBy'\nimport reduce from 'lodash/reduce'\nimport Effects from './Effects'\nimport FocusIndicator from './FocusIndicator'\n\nconst devMode = process.env.NODE_ENV === 'development'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${({ theme }) => theme.background};\n    overflow: hidden;\n  }\n\n  canvas {\n    outline: 0;\n  }\n`\n\nconst TopLeft = styled.div`\n  position: absolute;\n  top: 1vmin;\n  left: 1vmin;\n`\n\nconst TopRight = styled.div`\n  position: absolute;\n  top: 1vmin;\n  right: 1vmin;\n`\n\nconst Visuals: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = memo(({ solarSystems, killmails }) => {\n  return <Canvas onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n    <ThemeContext.Provider value={theme}>\n      <Stars solarSystems={solarSystems} />\n      <Flares solarSystems={solarSystems} killmails={killmails} />\n      <FocusIndicator />\n\n      <Camera solarSystems={solarSystems} killmails={killmails} />\n\n      <Effects />\n    </ThemeContext.Provider>\n  </Canvas>\n})\n\nconst App: React.FC<{}> = () => {\n  useKillmailMonitor('wss://zkillboard.com/websocket/')\n  useSolarSystemData(process.env.PUBLIC_URL + '/data/universe.json')\n  useConnectionStatus()\n\n  const killmailsRef = useRef<Killmail[]>([])\n\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n\n  const killmails = useKillmails(useCallback(state => {\n    const inCurrentSystems = reduce(state.killmails, (arr, km) => {\n      if (solarSystems[km.solarSystemId]) {\n        arr.push(km)\n      }\n      return arr\n    }, [] as Killmail[])\n    return sortBy(inCurrentSystems, 'receivedAt').reverse()\n  }, [solarSystems]))\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <ThemeProvider theme={theme}>\n    <GlobalStyle />\n\n    <Visuals solarSystems={solarSystems} killmails={killmailsRef} />\n\n    <TopLeft>\n      <KillmailTicker killmails={killmails} />\n    </TopLeft>\n\n    <TopRight>\n      <Controls />\n      {devMode && <DevTools />}\n    </TopRight>\n  </ThemeProvider>\n}\n\nexport default App;\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCompressArrowsAlt, faExpandArrowsAlt, faWifi, faVideo, faGlobe, faList, faSlash\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCompressArrowsAlt, faExpandArrowsAlt, faWifi, faVideo, faGlobe, faList, faSlash)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './utils/fontawesome'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Component />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    console.clear()\n    render(NextApp)\n  })\n}\n"],"sourceRoot":""}
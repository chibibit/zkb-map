{"version":3,"sources":["glow.png","utils/scaling.ts","store/solarSystems.ts","store/killmails.ts","store/index.ts","useKillmails.tsx","CameraControls.tsx","utils/theme.ts","utils/geometry.ts","Points.tsx","Stars.tsx","Flares.tsx","KillmailTicker.tsx","utils/formatting.ts","DevTools.tsx","App.tsx","index.tsx"],"names":["module","exports","ageMultiplier","age","THREE","smoothstep","t","MAX_KILLMAIL_AGE_SEC","Math","pow","scaleValue","value","normalized","clamp","mapLinear","useMinViewportSize","useThree","size","height","width","min","fetchSolarSystems","createAsyncThunk","a","fetch","process","response","json","data","slice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","raw","payload","each","rawSolarSystem","id","x","y","z","n","r","s","parseInt","radius","security","receiveKillmail","killmail","trimKillmailsBefore","oldest","subSeconds","Date","pickBy","receivedAt","actions","rootReducer","combineReducers","solarSystems","killmails","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActionPaths","ignoredPaths","immutableCheck","useAppDispatch","useDispatch","useAppSelector","useSelector","subscribeMessage","JSON","stringify","useKillmails","sourceUrl","dispatch","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","killmail_id","killmail_time","victim","solar_system_id","zkb","time","parseISO","characterId","character_id","corporationId","corporation_id","allianceId","alliance_id","shipTypeId","ship_type_id","solarSystemId","url","totalValue","scaledValue","parseWebsocketKillmail","parse","close","extend","OrbitControls","CameraControls","camera","domElement","gl","controls","useRef","useFrame","_state","current","update","ref","args","theme","background","colorMaxSec","colorMinSec","flare","text","ThemeContext","React","createContext","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","attributes","position","needsUpdate","flareColor","tempVector","positionToArray","target","index","toArray","flareTexture","load","glow","uniforms","color","pointTexture","Points","forwardRef","_props","attach","vertexShader","fragmentShader","blending","depthTest","transparent","memo","pointsRef","useContext","minViewportSize","solarSystemArray","Object","values","length","systemSize","solarSystem","lerp","now","baseFlareSize","colorFlare","differenceInMilliseconds","fade","keyframes","TickerContainer","styled","div","UNIT","EntryContainer","Data","ImageLink","area","Image","src","href","style","alt","KillmailEntry","billion","round","million","thousand","KillmailTicker","entries","sortBy","reverse","map","km","key","getTime","Component","GlobalStyle","createGlobalStyle","reset","cameraConfig","near","far","killmailsRef","Provider","onCreated","setClearColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.027aaed6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";","import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\n\nexport const MAX_KILLMAIL_AGE_SEC = 60\n\nconst fullyVisibleMs = 500\nconst fullyInvisibleMs = MAX_KILLMAIL_AGE_SEC * 1000\n\nexport const ageMultiplier = (age: number): number => {\n  if (age < fullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, fullyVisibleMs)\n  } else {\n    const t = THREE.MathUtils.smoothstep(age, fullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 10_000_000_000\nconst minValueMultiplier = 1\nconst maxValueMultiplier = 10\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport each from 'lodash/each'\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n}\n\ntype SolarSystemApiResponse = Record<string, RawSolarSystem>\n\nexport const fetchSolarSystems = createAsyncThunk<SolarSystemApiResponse, void>(\n  'solarSystems/fetch',\n  async () => {\n    const response = await fetch(process.env.PUBLIC_URL + '/data/solarSystems.json')\n    const data: SolarSystemApiResponse = await response.json()\n    return data\n  }\n)\n\nconst slice = createSlice({\n  name: 'solarSystems',\n  initialState: {} as Record<string, SolarSystem>,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchSolarSystems.fulfilled, (state, action) => {\n      const raw = action.payload\n      each(raw, (rawSolarSystem, id) => {\n        const { x, y, z, n, r, s } = rawSolarSystem\n        state[id] = {\n          id: parseInt(id),\n          x,\n          y: z,\n          z: y,\n          name: n,\n          radius: r,\n          security: s\n        }\n      })\n    })\n  }\n})\n\nexport default slice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport pickBy from 'lodash/pickBy'\nimport subSeconds from 'date-fns/subSeconds'\n\nconst slice = createSlice({\n  name: 'killmails',\n  initialState: {} as Record<string, Killmail>,\n  reducers: {\n    receiveKillmail: (state, action: PayloadAction<Killmail>) => {\n      const killmail = action.payload\n      state[killmail.id] = killmail\n    },\n    trimKillmailsBefore: (state, action: PayloadAction<number>) => {\n      const oldest = subSeconds(new Date(), action.payload)\n      return pickBy(state, killmail => killmail.receivedAt > oldest)\n    }\n  }\n})\n\nexport const { receiveKillmail, trimKillmailsBefore } = slice.actions\nexport default slice.reducer\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { useSelector, useDispatch, TypedUseSelectorHook } from 'react-redux'\nimport { combineReducers } from 'redux'\n\nimport solarSystems from './solarSystems'\nimport killmails from './killmails'\n\nconst rootReducer = combineReducers({ solarSystems, killmails })\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActionPaths: ['payload.time', 'payload.receivedAt'],\n      ignoredPaths: ['killmails']\n    },\n    immutableCheck: false\n  })\n})\n\ntype AppDispatch = typeof store.dispatch\ntype AppState = ReturnType<typeof rootReducer>\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector\n\nexport { fetchSolarSystems } from './solarSystems'\nexport { receiveKillmail, trimKillmailsBefore } from './killmails'\n\nexport default store\n","import { useEffect } from 'react'\nimport parseISO from 'date-fns/parseISO'\nimport { scaleValue, MAX_KILLMAIL_AGE_SEC } from './utils/scaling'\nimport { useAppDispatch, receiveKillmail, trimKillmailsBefore } from './store'\n\nconst subscribeMessage = JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": \"killstream\"\n})\n\nconst decayIntervalMs = 10 * 1000\n\ninterface WebsocketKillmail {\n  killmail_id: number\n  killmail_time: string\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\nconst parseWebsocketKillmail = (raw: WebsocketKillmail): Killmail => {\n  const { killmail_id, killmail_time, victim, solar_system_id, zkb } = raw\n\n  const time = parseISO(killmail_time)\n\n  return {\n    id: killmail_id,\n    time,\n    receivedAt: new Date(),\n    characterId: victim.character_id,\n    corporationId: victim.corporation_id,\n    allianceId: victim.alliance_id,\n    shipTypeId: victim.ship_type_id,\n    solarSystemId: solar_system_id,\n    url: zkb.url,\n    totalValue: zkb.totalValue,\n    scaledValue: scaleValue(zkb.totalValue)\n  }\n}\n\nexport function useKillmails(sourceUrl: string): void {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(trimKillmailsBefore(MAX_KILLMAIL_AGE_SEC))\n    }, decayIntervalMs)\n    return () => clearInterval(interval)\n  }, [dispatch])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage)\n    }\n\n    connection.onmessage = (e) => {\n      dispatch(\n        receiveKillmail(\n          parseWebsocketKillmail(JSON.parse(e.data))\n        )\n      )\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, dispatch])\n}\n","import React, {  useRef } from 'react'\nimport { useFrame, extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nextend({ OrbitControls })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: React.DetailedHTMLProps<any, any>\n    }\n  }\n}\n\nexport const CameraControls: React.FC<{}> = () => {\n  const { camera, gl: { domElement } } = useThree()\n  const controls = useRef<OrbitControls>()\n  useFrame(_state => controls.current?.update())\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\n};\n","import React from 'react'\n\nexport const theme = {\n  background: '#060606',\n  colorMaxSec: '#2A9FD6',\n  colorMinSec: '#E6E6E6',\n  flare: '#E60000',\n  text: '#E6E6E6'\n}\n\nexport const ThemeContext = React.createContext(theme)\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\ninterface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef((_props, ref) => <points ref={ref as any}>\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import React, { useRef, useContext } from 'react'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from './utils/theme'\nimport { useMinViewportSize } from './utils/scaling'\nimport { useFrame } from 'react-three-fiber'\n\nconst viewportRelativeScale = 90\n\nconst Stars: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n    const solarSystemArray = Object.values(solarSystems)\n\n    const count = solarSystemArray.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystemArray[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      new THREE.Color(theme.colorMinSec).lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Stars)\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ageMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from './utils/theme'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 8\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * scaledValue * ageMultiplier(age)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Flares)\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { theme } from './utils/theme'\nimport { MAX_KILLMAIL_AGE_SEC } from './utils/scaling'\nimport { stringifyPrice } from './utils/formatting'\nimport values from 'lodash/values'\nimport sortBy from 'lodash/sortBy'\n\nconst UNIT = 32\n\n// 50%, because MAX_KILLMAIL_AGE_SEC is not a guaranteed removal\nconst fade = keyframes`\n  0% { opacity: 0; }\n  0.5% { opacity: 1; }\n  10% { opacity: 0.9; }\n  50% { opacity: 0; }\n  100% { opacity: 0; }\n`\n\nconst TickerContainer = styled.div`\n  position: absolute;\n  top: ${UNIT / 2}px;\n  left: ${UNIT / 2}px;\n  overflow: hidden;\n  max-height: calc(100vh - ${UNIT}px);\n`\n\nconst EntryContainer = styled.div`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\"\n                       \"ship data      data        data\";\n  grid-template-columns: ${UNIT * 2}px ${UNIT}px ${UNIT}px 1fr;\n  grid-template-rows: repeat(2, ${UNIT}px);\n  grid-gap: ${UNIT / 8}px;\n  animation: ${fade} ${MAX_KILLMAIL_AGE_SEC * 2}s linear;\n`\n\nconst Data = styled.div`\n  grid-area: data;\n  color: ${theme.text};\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  size: number\n  href?: string\n}> = ({ src, area, size, href }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <img\n      src={`${src}?size=${size}`}\n      style={{ height: size, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n  solarSystem: SolarSystem\n}> = ({ killmail, solarSystem }) => {\n  if (!solarSystem) {\n    return null\n  }\n\n  const { name } = solarSystem\n  const { characterId, corporationId, allianceId, shipTypeId, totalValue, url } = killmail\n\n  return <EntryContainer>\n    {shipTypeId && <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      size={UNIT * 2}\n      href={url}\n    />}\n    {characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      size={UNIT}\n      href={`https://zkillboard.com/character/${characterId}/`}\n    />}\n    {corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      size={UNIT}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n    />}\n    {allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      size={UNIT}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n    />}\n\n    <Data>\n      {stringifyPrice(totalValue)} @ {name}\n    </Data>\n  </EntryContainer>\n}\n\nconst KillmailTicker: React.FC<{\n  killmails: Record<string, Killmail>\n  solarSystems: Record<string, SolarSystem>\n}> = ({ killmails, solarSystems }) => {\n  const entries = sortBy(values(killmails), 'receivedAt').reverse().map(km => {\n    const { id, solarSystemId } = km\n    const solarSystem = solarSystems[solarSystemId]\n\n    return <KillmailEntry killmail={km} solarSystem={solarSystem} key={id} />\n  })\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import round from 'lodash/round'\n\nconst thousand = 1_000\nconst million = thousand * thousand\nconst billion = million * thousand\nconst precision = 1\n\nconst displayBillionsFrom = billion / 2\nconst displayMillionsFrom = million / 2\n\nexport const stringifyPrice = (value: number): string => {\n  if (value > displayBillionsFrom) {\n    return `${round(value / billion, precision)}b`\n  } else if (value > displayMillionsFrom) {\n    return `${round(value / million, precision)}m`\n  } else {\n    return `${round(value / thousand, precision)}k`\n  }\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch, receiveKillmail, useAppSelector } from './store'\nimport { theme } from './utils/theme'\nimport { Stats } from 'drei'\nimport random from 'lodash/random'\nimport sample from 'lodash/sample'\nimport { scaleValue } from './utils/scaling'\n\nconst Container = styled.div`\n  position: absolute;\n  top: 1vh;\n  right: 1vw;\n  color: ${theme.text};\n  display: flex;\n  flex-flow: column;\n  gap: 1vh;\n`\n\nconst minValue = 10_000\nconst maxValue = 10_000_000_000\n\nlet testId = new Date().getTime()\nconst buildTestKillmail = (value: number, solarSystemId: string): Killmail => {\n  testId += 1\n\n  const now = new Date()\n\n  return {\n    id: testId,\n    time: now,\n    receivedAt: now,\n    characterId: 90230071,\n    corporationId: 98076155,\n    allianceId: 99007254,\n    shipTypeId: 22456,\n    solarSystemId: parseInt(solarSystemId),\n    url: 'https://example.com',\n    totalValue: value,\n    scaledValue: scaleValue(value)\n  }\n}\n\nconst DevTools: React.FC<{}> = () => {\n  const solarSystems = useAppSelector(state => state.solarSystems)\n  const dispatch = useAppDispatch()\n  const [activityInterval, setAcitivtyInterval] = useState(1000)\n\n  const randomSolarSystemId = useCallback(() => sample(Object.keys(solarSystems)) as string, [solarSystems])\n\n  const [statsOn, setStatsOn] = useState(false)\n\n  const [activityOn, setActivityOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (activityOn) {\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 90 ? maxValue : minValue * 1000\n        const id = randomSolarSystemId()\n        const value = random(minValue, maxAllowed)\n        dispatch(receiveKillmail(buildTestKillmail(value, id)))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [activityOn, dispatch, randomSolarSystemId, activityInterval])\n\n  const [oneSystemFightOn, setOneSystemFightOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (oneSystemFightOn) {\n      const id = randomSolarSystemId()\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 70 ? maxValue : minValue * 1000\n        const value = random(minValue, maxAllowed)\n        dispatch(receiveKillmail(buildTestKillmail(value, id)))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [oneSystemFightOn, dispatch, randomSolarSystemId, activityInterval])\n\n  return <Container>\n    <label>\n      <input type='checkbox' checked={statsOn} onChange={() => setStatsOn(!statsOn)} />\n      Show FPS\n    </label>\n    {statsOn && <Stats />}\n\n    <label>\n      <input type='range' min={500} max={30000} value={activityInterval} onChange={({ target: { value } }) => setAcitivtyInterval(parseInt(value)) }/>\n      <div>\n        Activity interval: {activityInterval}\n      </div>\n    </label>\n\n    <label>\n      <input type='checkbox' checked={activityOn} onChange={() => setActivityOn(!activityOn)} />\n      Constant random activity\n    </label>\n\n    <label>\n      <input type='checkbox' checked={oneSystemFightOn} onChange={() => setOneSystemFightOn(!oneSystemFightOn)} />\n      One system activity\n    </label>\n\n    <button onClick={() => dispatch(receiveKillmail(buildTestKillmail(random(maxValue / 10, maxValue), randomSolarSystemId())))}>\n      Big boom\n    </button>\n  </Container>\n}\n\nexport default DevTools\n","import React, { useRef, useEffect } from 'react'\nimport { useKillmails } from './useKillmails'\nimport { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport { CameraControls } from './CameraControls'\nimport { theme, ThemeContext } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport KillmailTicker from './KillmailTicker'\nimport { useAppSelector, fetchSolarSystems, useAppDispatch } from './store'\nimport DevTools from './DevTools'\n\nconst devMode = process.env.NODE_ENV === 'development'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${theme.background};\n    overflow: hidden;\n  }\n\n  canvas {\n    outline: 0;\n  }\n`\n\nconst cameraConfig  = {\n  position: new THREE.Vector3(0, 0, 1_000),\n  near: 0.001,\n  far: 10_000\n}\n\nconst App: React.FC<{}> = () => {\n  const dispatch = useAppDispatch()\n\n  const sourceUrl = 'wss://zkillboard.com/websocket/'\n  useKillmails(sourceUrl)\n\n  useEffect(() => {\n    dispatch(fetchSolarSystems())\n  }, [dispatch])\n\n  const killmailsRef = useRef<Killmail[]>([])\n\n  const solarSystems = useAppSelector(state => state.solarSystems)\n  const killmails = useAppSelector(state => state.killmails)\n\n  useEffect(() => {\n    killmailsRef.current = Object.values(killmails)\n  }, [killmails])\n\n  return <ThemeContext.Provider value={theme}>\n    <GlobalStyle />\n\n    <Canvas camera={cameraConfig} onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n      <ambientLight />\n\n      <Stars solarSystems={solarSystems} />\n      <Flares solarSystems={solarSystems} killmails={killmailsRef} />\n\n      <CameraControls />\n    </Canvas>\n\n    <KillmailTicker killmails={killmails} solarSystems={solarSystems} />\n    {devMode && <DevTools />}\n  </ThemeContext.Provider>\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <Component />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    render(NextApp)\n  })\n}\n"],"sourceRoot":""}
{"version":3,"sources":["glow.png","store/configuration.ts","utils/scaling.ts","store/solarSystems.ts","store/killmails.ts","store/connection.ts","store/index.ts","useKillmails.tsx","utils/theme.ts","utils/geometry.ts","Points.tsx","Stars.tsx","Flares.tsx","KillmailTicker.tsx","useAnimationFrame.ts","DevTools.tsx","Controls.tsx","Camera.tsx","Effects.tsx","App.tsx","useConnectionStatus.ts","utils/fontawesome.ts","index.tsx"],"names":["module","exports","CameraMode","ageMultiplier","age","scale","THREE","smoothstep","fullyInvisibleMs","t","Math","pow","scaleValue","value","normalized","clamp","mapLinear","useMinViewportSize","useThree","size","height","width","min","fetchSolarSystems","createAsyncThunk","a","fetch","process","response","json","data","slice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","raw","payload","each","rawSolarSystem","id","x","y","z","n","r","s","parseInt","radius","security","shouldKeep","killmail","now","normalAge","scaledValue","receivedAt","differenceInMilliseconds","receiveKillmail","Date","trimKillmails","pickBy","actions","connected","pingReceived","undefined","receivePing","checkConnection","cameraMode","follow","updateConfiguration","rootReducer","combineReducers","solarSystems","killmails","connection","configuration","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","useAppDispatch","useDispatch","useAppSelector","useSelector","subscribeMessage","channel","JSON","stringify","parseWebsocketKillmail","killmail_id","killmail_time","victim","solar_system_id","zkb","time","parseISO","characterId","character_id","corporationId","corporation_id","allianceId","alliance_id","shipTypeId","ship_type_id","solarSystemId","url","totalValue","error","useKillmails","sourceUrl","preloadRecent","dispatch","useEffect","interval","setInterval","clearInterval","then","res","length","latestTimestamp","maxDate","map","offset","km","addMilliseconds","normalizeReceivedAtForCachedMessages","compact","WebSocket","onopen","send","onmessage","e","parsed","parse","console","onclose","close","theme","background","colorMaxSec","colorMinSec","flare","text","unit","gapSize","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","attributes","position","needsUpdate","flareColor","tempVector","positionToArray","target","index","toArray","flareTexture","load","glow","uniforms","color","pointTexture","Points","forwardRef","_props","ref","attach","vertexShader","fragmentShader","blending","depthTest","transparent","React","memo","pointsRef","useRef","useContext","ThemeContext","minViewportSize","useFrame","current","solarSystemArray","Object","values","systemSize","solarSystem","lerp","baseFlareSize","colorFlare","TickerContainer","styled","div","EntryContainer","animated","ImageLink","area","Image","src","href","img","style","alt","KillmailEntry","callback","useSpring","opacity","paddingBottom","set","animationFrame","useCallback","requestRef","requestAnimationFrame","requestInLoop","cancelAnimationFrame","gridAutoRows","KillmailTicker","entries","key","getTime","Container","FlatButton","button","onClick","FullscreenToggle","useState","fullScreen","setFullScreen","type","title","document","exitFullscreen","getElementById","requestFullscreen","icon","ConnectionStatus","cameraIcon","full","nextCameraModes","cameraTitles","CameraStatus","mode","Controls","defaultPosition","minRadius","Camera","points","computeBoundingSphere","boundingSphere","center","max","lookAtPoints","maxX","Infinity","maxY","maxZ","minX","minY","minZ","totalX","totalY","totalZ","totalScale","scaledX","scaledY","scaledZ","makeDefault","near","far","fov","Effects","luminanceThreshold","luminanceSmoothing","intensity","eskil","darkness","GlobalStyle","createGlobalStyle","reset","TopLeft","TopRight","App","useConnectionStatus","killmailsRef","inCurrentSystems","reduce","arr","push","sortBy","reverse","onCreated","gl","setClearColor","Provider","library","add","faCompressArrowsAlt","faExpandArrowsAlt","faLink","faUnlink","faVideo","faGlobe","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d69108c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport enum CameraMode {\n  full,\n  follow\n}\n\ninterface State {\n  cameraMode: CameraMode\n}\n\nconst initialState: State = {\n  cameraMode: CameraMode.follow\n}\n\nconst slice = createSlice({\n  name: 'configuration',\n  initialState: initialState,\n  reducers: {\n    updateConfiguration: (state, action: PayloadAction<Partial<State>>) => {\n      return { ...state, ...action.payload }\n    }\n  }\n})\n\nexport const { updateConfiguration } = slice.actions\nexport default slice.reducer\n","import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\n\nexport const normalKillmailAgeMs = 45 * 1000\nexport const killmailFullyVisibleMs = 500\n\nexport const ageMultiplier = (age: number, scale: number): number => {\n  if (age < killmailFullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, killmailFullyVisibleMs)\n  } else {\n    const fullyInvisibleMs = normalKillmailAgeMs * scale\n    const t = THREE.MathUtils.smoothstep(age, killmailFullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 10_000_000_000\nconst minValueMultiplier = 1\nconst maxValueMultiplier = 10\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport each from 'lodash/each'\nimport clamp from 'lodash/clamp'\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n}\n\ntype SolarSystemApiResponse = Record<string, RawSolarSystem>\n\nexport const fetchSolarSystems = createAsyncThunk<SolarSystemApiResponse, void>(\n  'solarSystems/fetch',\n  async () => {\n    const response = await fetch(process.env.PUBLIC_URL + '/data/solarSystems.json')\n    const data: SolarSystemApiResponse = await response.json()\n    return data\n  }\n)\n\nconst slice = createSlice({\n  name: 'solarSystems',\n  initialState: {} as Record<string, SolarSystem>,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchSolarSystems.fulfilled, (state, action) => {\n      const raw = action.payload\n      each(raw, (rawSolarSystem, id) => {\n        const { x, y, z, n, r, s } = rawSolarSystem\n        state[id] = {\n          id: parseInt(id),\n          x,\n          y: z,\n          z: y,\n          name: n,\n          radius: clamp(r * 100, 0.5, 1.5),\n          security: s\n        }\n      })\n    })\n  }\n})\n\nexport default slice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport pickBy from 'lodash/pickBy'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\n\nconst shouldKeep = (killmail: Killmail, now: Date, normalAge: number) => {\n  const { scaledValue, receivedAt } = killmail\n  const age = differenceInMilliseconds(now, receivedAt)\n  return age < normalAge * scaledValue\n}\n\nconst slice = createSlice({\n  name: 'killmails',\n  initialState: {} as Record<string, Killmail>,\n  reducers: {\n    receiveKillmail: (state, action: PayloadAction<{ killmail: Killmail, normalAge: number }>) => {\n      const { killmail, normalAge } = action.payload\n      if (shouldKeep(killmail, new Date(), normalAge)) {\n        state[killmail.id] = killmail\n      }\n    },\n    trimKillmails: (state, action: PayloadAction<number>) => {\n      const now = new Date()\n      const normalAge = action.payload\n      return pickBy(state, killmail => shouldKeep(killmail, now, normalAge))\n    }\n  }\n})\n\nexport const { receiveKillmail, trimKillmails } = slice.actions\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\n\nconst normalIntervalBetweenPingsMs = 15 * 1000\n\ninterface State {\n  connected: boolean\n  pingReceived?: Date\n}\n\nconst initialState: State = {\n  connected: false,\n  pingReceived: undefined\n}\n\nconst slice = createSlice({\n  name: 'connection',\n  initialState: initialState,\n  reducers: {\n    receivePing: (state) => {\n      state.connected = true\n      state.pingReceived = new Date()\n    },\n    checkConnection: (state) => {\n      state.connected = state.pingReceived ? differenceInMilliseconds(new Date(), state.pingReceived) < normalIntervalBetweenPingsMs : false\n    }\n  }\n})\n\nexport const { receivePing, checkConnection } = slice.actions\nexport default slice.reducer\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { useSelector, useDispatch, TypedUseSelectorHook } from 'react-redux'\nimport { combineReducers } from 'redux'\n\nimport solarSystems from './solarSystems'\nimport killmails from './killmails'\nimport connection from './connection'\nimport configuration from './configuration'\n\nconst rootReducer = combineReducers({ solarSystems, killmails, connection, configuration })\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n    immutableCheck: false\n  })\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector\n\nexport { fetchSolarSystems } from './solarSystems'\nexport { receiveKillmail, trimKillmails } from './killmails'\nexport { receivePing, checkConnection } from './connection'\nexport { updateConfiguration } from './configuration'\n\nexport default store\n","import { useEffect } from 'react'\nimport parseISO from 'date-fns/parseISO'\nimport { scaleValue, normalKillmailAgeMs } from './utils/scaling'\nimport { useAppDispatch, receiveKillmail, trimKillmails, receivePing } from './store'\nimport map from 'lodash/map'\nimport compact from 'lodash/compact'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport maxDate from 'date-fns/max'\nimport addMilliseconds from 'date-fns/addMilliseconds'\n\nconst subscribeMessage = (channel: string) => JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": channel\n})\n\nconst decayIntervalMs = 5 * 1000\n\ntype WebsocketStatusMessage = {\n  action: 'tqStatus'\n  tqStatus: string\n  tqCount: string\n  kills: string\n}\n\ntype WebsocketKillmail = {\n  killmail_id: number\n  killmail_time: string\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\ntype WebsocketMessage = WebsocketKillmail | WebsocketStatusMessage\n\nconst parseWebsocketKillmail = (raw: WebsocketKillmail): Killmail | null => {\n  try {\n    const { killmail_id, killmail_time, victim, solar_system_id, zkb } = raw\n\n    const time = parseISO(killmail_time)\n\n    return {\n      id: killmail_id,\n      time,\n      receivedAt: new Date(),\n      characterId: victim.character_id,\n      corporationId: victim.corporation_id,\n      allianceId: victim.alliance_id,\n      shipTypeId: victim.ship_type_id,\n      solarSystemId: solar_system_id,\n      url: zkb.url,\n      totalValue: zkb.totalValue,\n      scaledValue: scaleValue(zkb.totalValue)\n    }\n  } catch (error) {\n    return null\n  }\n}\n\nconst normalizeReceivedAtForCachedMessages = (killmails: Killmail[]): Killmail[] => {\n  if (killmails.length < 1) {\n    return killmails\n  }\n\n  const latestTimestamp = maxDate(map(killmails, 'time'))\n  const offset = differenceInMilliseconds(new Date(), latestTimestamp)\n\n  return map(killmails, km => ({ ...km, receivedAt: addMilliseconds(km.time, offset) }))\n}\n\ninterface Settings {\n  sourceUrl: string\n  preloadRecent: boolean\n}\n\nexport function useKillmails({ sourceUrl, preloadRecent }: Settings): void {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(trimKillmails(normalKillmailAgeMs))\n    }, decayIntervalMs)\n    return () => clearInterval(interval)\n  }, [dispatch])\n\n  useEffect(() => {\n    preloadRecent && fetch(process.env.PUBLIC_URL + '/api/recent').then(res => res.json()).then(data => {\n      const killmails = normalizeReceivedAtForCachedMessages(compact(map(data, parseWebsocketKillmail)))\n      map(killmails, killmail => {\n        dispatch(receiveKillmail({ killmail, normalAge: normalKillmailAgeMs }))\n      })\n    })\n  }, [dispatch, preloadRecent])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage('killstream'))\n      connection.send(subscribeMessage('public'))\n    }\n\n    connection.onmessage = (e) => {\n      const parsed: WebsocketMessage = JSON.parse(e.data)\n\n      if ('killmail_id' in parsed) {\n        const killmail = parseWebsocketKillmail(parsed)\n        if (killmail) {\n          dispatch(receiveKillmail({ killmail, normalAge: normalKillmailAgeMs }))\n        }\n      } else if ('tqStatus' in parsed) {\n        dispatch(receivePing())\n      } else {\n        console.error(parsed)\n      }\n    }\n\n    connection.onclose = (e) => {\n      console.error(e)\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, dispatch])\n}\n","export const theme = {\n  background: '#060606',\n  colorMaxSec: '#2A9FD6',\n  colorMinSec: '#E6E6E6',\n  flare: '#E60000',\n  text: '#E6E6E6',\n  unit: 32,\n  gapSize: 8\n}\n\nexport type Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\nexport interface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef((_props, ref) => <points ref={ref as any}>\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import React, { useRef, useContext } from 'react'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\nimport { useMinViewportSize } from './utils/scaling'\nimport { useFrame } from 'react-three-fiber'\n\nconst viewportRelativeScale = 75\n\nconst Stars: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n    const solarSystemArray = Object.values(solarSystems)\n\n    const count = solarSystemArray.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystemArray[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      new THREE.Color(theme.colorMinSec).lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize * solarSystem.radius\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Stars)\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ageMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 8\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * scaledValue * ageMultiplier(age, scaledValue)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default React.memo(Flares)\n","import React, { useCallback, useContext } from 'react'\nimport styled from 'styled-components'\nimport { ageMultiplier, killmailFullyVisibleMs } from './utils/scaling'\nimport { animated, useSpring, OpaqueInterpolation } from 'react-spring'\nimport { useAnimationFrame } from './useAnimationFrame'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ThemeContext } from 'styled-components'\n\nconst TickerContainer = styled.div`\n  overflow: hidden;\n  max-height: calc(100vh - ${({ theme }) => theme.unit}px);\n  display: flex;\n  flex-flow: column;\n`\n\nconst EntryContainer = styled(animated.div)`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  padding-bottom: ${({ theme }) => theme.gapSize}px;\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  height: OpaqueInterpolation<any>\n  href?: string,\n  size: number\n}> = ({ src, area, href, height, size }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <animated.img\n      src={`${src}?size=${size}`}\n      style={{ height, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n}> = React.memo(({ killmail }) => {\n  const theme = useContext(ThemeContext)\n  const { characterId, corporationId, allianceId, shipTypeId, url, receivedAt, scaledValue } = killmail\n\n  const [{ opacity, height, paddingBottom }, set] = useSpring(() => ({ opacity: 0, height: 0, paddingBottom: 0 }))\n\n  const animationFrame = useCallback(() => {\n    const age = differenceInMilliseconds(new Date(), receivedAt)\n    let opacity = ageMultiplier(age, scaledValue)\n    let height: number\n    if (age < killmailFullyVisibleMs || opacity > 0.1) {\n      height = theme.unit\n    } else {\n      height = 0\n      opacity = 0\n    }\n    set({ opacity, height, paddingBottom: height / 8 })\n  }, [set, receivedAt, scaledValue, theme.unit])\n\n  useAnimationFrame(animationFrame)\n\n  return <EntryContainer style={{ opacity, paddingBottom, gridAutoRows: height }}>\n    {shipTypeId && <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      height={height}\n      href={url}\n      size={theme.unit}\n    />}\n    {characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      height={height}\n      href={`https://zkillboard.com/character/${characterId}/`}\n      size={theme.unit}\n    />}\n    {corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      height={height}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n      size={theme.unit}\n    />}\n    {allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      height={height}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n      size={theme.unit}\n    />}\n  </EntryContainer>\n})\n\nconst KillmailTicker: React.FC<{\n  killmails: Killmail[]\n}> = ({ killmails }) => {\n  const entries = killmails.map(km => <KillmailEntry killmail={km} key={km.id} />)\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import { useEffect } from 'react'\n\nexport function useAnimationFrame(callback: () => void): void {\n  useEffect(() => {\n    let requestRef: number\n    const requestInLoop = () => {\n      callback()\n      requestRef = requestAnimationFrame(requestInLoop)\n    }\n    requestRef = requestAnimationFrame(requestInLoop)\n    return () => cancelAnimationFrame(requestRef)\n  }, [callback])\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch, receiveKillmail, useAppSelector } from './store'\nimport { Stats } from 'drei'\nimport random from 'lodash/random'\nimport sample from 'lodash/sample'\nimport { scaleValue, normalKillmailAgeMs } from './utils/scaling'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  flex-flow: column;\n  gap: 1vh;\n`\n\nconst minValue = 10_000\nconst maxValue = 10_000_000_000\n\nlet testId = new Date().getTime()\nconst buildTestKillmail = (value: number, solarSystemId: string) => {\n  testId += 1\n\n  const now = new Date()\n\n  return {\n    killmail: {\n      id: testId,\n      time: now,\n      receivedAt: now,\n      characterId: 90230071,\n      corporationId: 98076155,\n      allianceId: 99007254,\n      shipTypeId: 22456,\n      solarSystemId: parseInt(solarSystemId),\n      url: 'https://example.com',\n      totalValue: value,\n      scaledValue: scaleValue(value)\n    },\n    normalAge: normalKillmailAgeMs\n  }\n}\n\nconst DevTools: React.FC<{}> = () => {\n  const statsContainer = useRef(null)\n  const solarSystems = useAppSelector(state => state.solarSystems)\n  const dispatch = useAppDispatch()\n  const [activityInterval, setAcitivtyInterval] = useState(1000)\n\n  const randomSolarSystemId = useCallback(() => sample(Object.keys(solarSystems)) as string, [solarSystems])\n\n  const [statsOn, setStatsOn] = useState(false)\n\n  const [activityOn, setActivityOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (activityOn) {\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 90 ? maxValue : minValue * 1000\n        const id = randomSolarSystemId()\n        const value = random(minValue, maxAllowed)\n        dispatch(receiveKillmail(buildTestKillmail(value, id)))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [activityOn, dispatch, randomSolarSystemId, activityInterval])\n\n  const [oneSystemFightOn, setOneSystemFightOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (oneSystemFightOn) {\n      const id = randomSolarSystemId()\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 70 ? maxValue : minValue * 1000\n        const value = random(minValue, maxAllowed)\n        dispatch(receiveKillmail(buildTestKillmail(value, id)))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [oneSystemFightOn, dispatch, randomSolarSystemId, activityInterval])\n\n  return <Container>\n    <label>\n      <input type='checkbox' checked={statsOn} onChange={() => setStatsOn(!statsOn)} />\n      Show FPS\n    </label>\n    <div ref={statsContainer}></div>\n    {statsOn && <Stats parent={statsContainer} />}\n\n    <label>\n      <input type='range' min={500} max={30000} value={activityInterval} onChange={({ target: { value } }) => setAcitivtyInterval(parseInt(value)) }/>\n      <div>\n        Activity interval: {activityInterval}\n      </div>\n    </label>\n\n    <label>\n      <input type='checkbox' checked={activityOn} onChange={() => setActivityOn(!activityOn)} />\n      Constant random activity\n    </label>\n\n    <label>\n      <input type='checkbox' checked={oneSystemFightOn} onChange={() => setOneSystemFightOn(!oneSystemFightOn)} />\n      One system activity\n    </label>\n\n    <button onClick={() => dispatch(receiveKillmail(buildTestKillmail(random(maxValue / 10, maxValue), randomSolarSystemId())))}>\n      Big boom\n    </button>\n  </Container>\n}\n\nexport default DevTools\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useAppDispatch, useAppSelector } from './store'\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'\nimport { CameraMode } from './store/configuration'\nimport { updateConfiguration } from './store'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: grid;\n  grid-template-areas: \"fullscreen connection camera\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  direction: rtl;\n`\n\nconst FlatButton = styled.button<{ area: string }>`\n  color: ${({ theme }) => theme.text};\n  background: transparent;\n  border: none;\n  grid-area: ${({ area }) => area};\n  cursor: ${({ onClick }) => onClick ? 'pointer' : 'default'};\n`\n\nconst FullscreenToggle: React.FC = () => {\n  const [fullScreen, setFullScreen] = useState(false)\n\n  const onClick = () => {\n    if (fullScreen) {\n      document.exitFullscreen().then(() => setFullScreen(false))\n    } else {\n      document.getElementById('root')?.requestFullscreen().then(() => setFullScreen(true))\n    }\n  }\n\n  return <FlatButton type='button' title={fullScreen ? 'Exit fullscreen' : 'Go fullscreen'} onClick={onClick} area='fullscreen'>\n    <FontAwesomeIcon icon={fullScreen ? 'compress-arrows-alt' : 'expand-arrows-alt'} />\n  </FlatButton>\n}\n\nconst ConnectionStatus: React.FC = () => {\n  const connected = useAppSelector(state => state.connection.connected)\n\n  return <FlatButton type='button' title={connected ? 'Connected to live feed' : 'Disconnected from live feed!'} area='connection'>\n    <FontAwesomeIcon icon={connected ? 'link' : 'unlink'} />\n  </FlatButton>\n}\n\nconst cameraIcon: Record<CameraMode, FontAwesomeIconProps['icon']> = {\n  [CameraMode.full]: 'globe',\n  [CameraMode.follow]: 'video'\n}\n\nconst nextCameraModes: Record<CameraMode, CameraMode> = {\n  [CameraMode.full]: CameraMode.follow,\n  [CameraMode.follow]: CameraMode.full\n}\n\nconst cameraTitles: Record<CameraMode, string> = {\n  [CameraMode.full]: 'Camera: whole map',\n  [CameraMode.follow]: 'Camera: follow the action'\n}\n\nconst CameraStatus: React.FC = () => {\n  const mode = useAppSelector(state => state.configuration.cameraMode)\n  const dispatch = useAppDispatch()\n\n  const onClick = () => {\n    const nextCameraMode = nextCameraModes[mode]\n    dispatch(updateConfiguration({ cameraMode: nextCameraMode }))\n  }\n\n  return <FlatButton type='button' title={cameraTitles[mode]} onClick={onClick} area='camera'>\n    <FontAwesomeIcon icon={cameraIcon[mode]} />\n  </FlatButton>\n}\n\n\nconst Controls: React.FC = () => {\n  return <Container>\n    <FullscreenToggle />\n    <ConnectionStatus />\n    <CameraStatus />\n  </Container>\n}\n\nexport default Controls\n","import React, { useEffect, useRef } from 'react'\nimport { PerspectiveCamera } from 'drei'\nimport * as THREE from 'three'\nimport { CameraMode } from './store/configuration'\nimport { positionToArray, HasPosition } from './utils/geometry'\nimport { useFrame } from 'react-three-fiber'\nimport { ageMultiplier } from './utils/scaling'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\n\nconst near = 0.001\nconst far = 10_000\nconst fov = 90\n\nconst defaultPosition = new THREE.Vector3(0, 0, 700)\n\nconst minRadius = defaultPosition.z / 3\nconst movementMultiplier = 0.01\n\nconst lookAtPoints = (points: HasPosition[]): THREE.Vector3 => {\n  const count = points.length\n\n  const positions = new Float32Array(count * 3)\n\n  for (let index = 0; index < count; index++) {\n    positionToArray(points[index], positions, index)\n  }\n\n  const geometry = new THREE.BufferGeometry()\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n  geometry.computeBoundingSphere()\n  if (geometry.boundingSphere) {\n    const { center, radius } = geometry.boundingSphere\n\n    center.z += Math.max(radius * 1.1, minRadius)\n    return center\n  } else {\n    return defaultPosition\n  }\n}\n\nconst Camera: React.FC<{\n  solarSystems: Record<string, SolarSystem>,\n  killmails: React.MutableRefObject<Killmail[]>,\n  mode: CameraMode\n}> = React.memo(({ solarSystems, mode, killmails }) => {\n  const ref = useRef<THREE.Camera>()\n  const position = useRef(defaultPosition)\n\n  useEffect(() => {\n    const solarSystemArray = Object.values(solarSystems)\n    if (solarSystemArray.length > 0) {\n      position.current = lookAtPoints(solarSystemArray)\n      if (ref.current) {\n        ref.current.position.lerp(position.current, 1)\n      }\n    }\n  }, [solarSystems])\n\n  useFrame(() => {\n    if (ref.current && position.current) {\n      let target = position.current\n\n      const count = killmails.current?.length || 0\n\n      if (count > 0 && mode === CameraMode.follow) {\n        const now = new Date()\n\n        let maxX = -Infinity\n        let maxY = -Infinity\n        let maxZ = -Infinity\n\n        let minX = +Infinity\n        let minY = +Infinity\n        let minZ = +Infinity\n\n        let totalX = 0\n        let totalY = 0\n        let totalZ = 0\n\n        let totalScale = 0\n\n        for (let index = 0; index < count; index++) {\n          const { solarSystemId, scaledValue, receivedAt } = killmails.current[index]\n          const { x, y, z } = solarSystems[solarSystemId]\n\n          const age = differenceInMilliseconds(now, receivedAt)\n          const scale = scaledValue * ageMultiplier(age, scaledValue)\n\n          if (scale > 0.1) {\n            const scaledX = scale * x\n            const scaledY = scale * y\n            const scaledZ = scale * z\n\n            maxX = Math.max(maxX, x)\n            maxY = Math.max(maxY, y)\n            maxZ = Math.max(maxZ, z)\n\n            minX = Math.min(minX, x)\n            minY = Math.min(minY, y)\n            minZ = Math.min(minZ, z)\n\n            totalX += scaledX\n            totalY += scaledY\n            totalZ += scaledZ\n\n            totalScale += scale\n          }\n        }\n\n        if (totalScale > 0) {\n          const x = totalX / totalScale\n          const y = totalY / totalScale\n          const z = totalZ / totalScale\n\n          const radius = Math.max(\n            maxX - x,\n            maxY - y,\n            maxZ - z,\n            x - minX,\n            y - minY,\n            z - minZ,\n            minRadius\n          )\n\n          target = new THREE.Vector3(x, y, z + radius * 1.1)\n        }\n      }\n\n      ref.current.position.lerp(target, movementMultiplier)\n    }\n  })\n\n  return <>\n    <PerspectiveCamera\n      ref={ref}\n      makeDefault\n      near={near}\n      far={far}\n      fov={fov}\n    />\n  </>\n})\n\nexport default Camera\n","import React from 'react'\nimport { EffectComposer, Bloom, Noise, Vignette } from 'react-postprocessing'\n\nconst Effects: React.FC = () => {\n  return <EffectComposer>\n    <Bloom luminanceThreshold={0.2} luminanceSmoothing={0.9} intensity={3} />\n    <Noise opacity={0.04} />\n    <Vignette eskil={false} offset={0.1} darkness={1.1} />\n  </EffectComposer>\n}\n\nexport default Effects\n","import React, { useRef, useEffect } from 'react'\nimport { useKillmails } from './useKillmails'\nimport styled, { createGlobalStyle, ThemeProvider, ThemeContext } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport { theme } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport KillmailTicker from './KillmailTicker'\nimport { useAppSelector, fetchSolarSystems, useAppDispatch } from './store'\nimport DevTools from './DevTools'\nimport { useConnectionStatus } from './useConnectionStatus'\nimport Controls from './Controls'\nimport Camera from './Camera'\nimport sortBy from 'lodash/sortBy'\nimport reduce from 'lodash/reduce'\nimport Effects from './Effects'\n\nconst devMode = process.env.NODE_ENV === 'development'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${({ theme }) => theme.background};\n    overflow: hidden;\n  }\n\n  canvas {\n    outline: 0;\n  }\n`\n\nconst TopLeft = styled.div`\n  position: absolute;\n  top: 1vmin;\n  left: 1vmin;\n`\n\nconst TopRight = styled.div`\n  position: absolute;\n  top: 1vmin;\n  right: 1vmin;\n`\n\nconst App: React.FC<{}> = () => {\n  const dispatch = useAppDispatch()\n\n  useKillmails({ sourceUrl: 'wss://zkillboard.com/websocket/', preloadRecent: devMode })\n\n  useConnectionStatus()\n\n  useEffect(() => {\n    dispatch(fetchSolarSystems())\n  }, [dispatch])\n\n  const killmailsRef = useRef<Killmail[]>([])\n\n  const solarSystems = useAppSelector(state => state.solarSystems)\n  const killmails = useAppSelector(state => {\n    const inCurrentSystems = reduce(state.killmails, (arr, km) => {\n      if (solarSystems[km.solarSystemId]) {\n        arr.push(km)\n      }\n      return arr\n    }, [] as Killmail[])\n    return sortBy(inCurrentSystems, 'receivedAt').reverse()\n  })\n  const mode = useAppSelector(state => state.configuration.cameraMode)\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <ThemeProvider theme={theme}>\n    <GlobalStyle />\n\n    <Canvas onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n      <ThemeContext.Provider value={theme}>\n        <ambientLight />\n\n        <Stars solarSystems={solarSystems} />\n        <Flares solarSystems={solarSystems} killmails={killmailsRef} />\n\n        <Camera solarSystems={solarSystems} killmails={killmailsRef} mode={mode} />\n\n        <Effects />\n      </ThemeContext.Provider>\n    </Canvas>\n\n    <TopLeft>\n      <KillmailTicker killmails={killmails} />\n    </TopLeft>\n\n    <TopRight>\n      <Controls />\n      {devMode && <DevTools />}\n    </TopRight>\n  </ThemeProvider>\n}\n\nexport default App;\n","import { useEffect } from 'react'\nimport { useAppDispatch, checkConnection } from './store'\n\nconst checkInterval = 5 * 1000\n\nexport function useConnectionStatus(): void {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(checkConnection())\n    }, checkInterval)\n    return () => clearInterval(interval)\n  }, [dispatch])\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './utils/fontawesome'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <Component />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    render(NextApp)\n  })\n}\n"],"sourceRoot":""}
{"version":3,"sources":["glow.png","utils/theme.ts","utils/geometry.ts","Points.tsx","hooks/connection.ts","hooks/killmails.ts","utils/scaling.ts","Stars.tsx","Flares.tsx","KillmailTicker.tsx","hooks/configuration.ts","hooks/solarSystems.ts","DevTools.tsx","Controls.tsx","Camera.tsx","Effects.tsx","RegionNames.tsx","App.tsx","utils/fontawesome.ts","index.tsx"],"names":["module","exports","theme","background","colorMaxSec","colorMinSec","flare","text","unit","gapSize","regionFontSize","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","THREE","attributes","position","needsUpdate","flareColor","size","tempVector","positionToArray","target","index","x","y","z","toArray","flareTexture","load","glow","uniforms","color","value","pointTexture","Points","forwardRef","_props","ref","attach","vertexShader","fragmentShader","blending","depthTest","transparent","useConnection","create","set","connected","pingReceived","undefined","receivePing","Date","checkConnection","differenceInMilliseconds","shouldKeep","now","killmail","scaledValue","receivedAt","subscribeMessage","channel","JSON","stringify","useKillmails","killmails","receiveKillmail","state","id","trimKillmails","shouldKeepNow","bind","pickBy","useKillmailMonitor","sourceUrl","useCallback","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","parsed","parse","data","raw","killmail_id","killmail_time","victim","solar_system_id","zkb","character_id","corporation_id","alliance_id","ship_type_id","url","totalValue","time","parseISO","characterId","corporationId","allianceId","shipTypeId","solarSystemId","scaleValue","parseKillmail","console","error","onclose","close","ageMultiplier","age","scale","smoothstep","fullyInvisibleMs","t","Math","pow","normalized","clamp","mapLinear","useMinViewportSize","useThree","height","width","min","Stars","solarSystems","pointsRef","useRef","useContext","ThemeContext","minViewportSize","useFrame","current","solarSystemArray","Object","values","length","systemSize","solarSystem","lerp","security","radius","Flares","baseFlareSize","colorFlare","CameraMode","TickerContainer","styled","div","EntryContainer","animated","ImageLink","a","area","Image","src","href","img","style","alt","KillmailEntry","React","memo","useSpring","opacity","paddingBottom","animate","config","duration","gridAutoRows","KillmailTicker","entries","map","km","key","useConfiguration","cameraMode","full","showRegionNames","setCameraMode","mode","toggleRegionNames","useSolarSystems","systems","regions","loaded","receive","reduce","region","n","parseInt","name","system","r","s","p","regionId","selectLoaded","selectReceive","getTime","Container","FlatButton","button","onClick","FullscreenToggle","useState","fullScreen","setFullScreen","type","title","document","exitFullscreen","then","getElementById","requestFullscreen","icon","ConnectionStatus","cameraIcon","follow","nextCameraModes","cameraTitles","CameraStatus","update","RegionNames","enabled","toggle","Controls","defaultPosition","minRadius","Camera","points","computeBoundingSphere","boundingSphere","center","max","lookAtPoints","maxX","Infinity","maxY","maxZ","minX","minY","minZ","totalX","totalY","totalZ","totalScale","scaledX","scaledY","scaledZ","clone","aspect","multiply","makeDefault","near","far","fov","multisampling","gl","capabilities","maxTextureSize","luminanceThreshold","luminanceSmoothing","intensity","eskil","offset","darkness","regionIds","Set","add","has","texts","anchorX","anchorY","fontSize","GlobalStyle","createGlobalStyle","reset","TopLeft","TopRight","Visuals","onCreated","setClearColor","Provider","App","abortController","AbortController","fetch","signal","res","json","abort","useSolarSystemData","process","useConnectionStatus","killmailsRef","inCurrentSystems","arr","push","sortBy","reverse","library","faCompressArrowsAlt","faExpandArrowsAlt","faLink","faUnlink","faVideo","faGlobe","faList","faListAlt","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e7d7e1ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";","export const theme = {\n  background: '#060606',\n  colorMaxSec: '#2A9FD6',\n  colorMinSec: '#E6E6E6',\n  flare: '#E60000',\n  text: '#E6E6E6',\n  unit: 32,\n  gapSize: 8,\n  regionFontSize: 8\n}\n\nexport type Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\nexport interface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef((_props, ref) => <points ref={ref as any}>\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect } from 'react'\nimport create from 'zustand'\n\nconst normalIntervalBetweenPingsMs = 15 * 1000\nconst checkInterval = 5 * 1000\n\ntype State = {\n  connected: boolean,\n  pingReceived?: Date,\n  receivePing: () => void,\n  checkConnection: () => void\n}\n\nexport const useConnection = create<State>(set => ({\n  connected: false,\n  pingReceived: undefined,\n  receivePing: () => set({ connected: true, pingReceived: new Date() }),\n  checkConnection: () => set(({ pingReceived }) => {\n    const connected = pingReceived ? differenceInMilliseconds(new Date(), pingReceived) < normalIntervalBetweenPingsMs : false\n    return { connected }\n  })\n}))\n\nexport const useConnectionStatus = () => {\n  const checkConnection = useConnection(useCallback(state => state.checkConnection, []))\n\n  useEffect(() => {\n    const interval = setInterval(checkConnection, checkInterval)\n    return () => clearInterval(interval)\n  }, [checkConnection])\n}\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect } from 'react'\nimport pickBy from 'lodash/pickBy'\nimport create from 'zustand'\nimport parseISO from 'date-fns/parseISO'\nimport { scaleValue } from '../utils/scaling'\nimport { useConnection } from './connection'\n\nexport const normalKillmailAgeMs = 45 * 1000\nconst trimIntervalMs = 5 * 1000\n\ntype WebsocketStatusMessage = {\n  action: 'tqStatus'\n  tqStatus: string\n  tqCount: string\n  kills: string\n}\n\ntype WebsocketKillmail = {\n  killmail_id: number\n  killmail_time: string\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\ntype WebsocketMessage = WebsocketKillmail | WebsocketStatusMessage\n\ntype State = {\n  killmails: Record<string, Killmail>,\n  receiveKillmail: (killmail: Killmail) => void,\n  trimKillmails: () => void\n}\n\nconst shouldKeep = (now: Date, killmail: Killmail) => {\n  const { scaledValue, receivedAt } = killmail\n  const age = differenceInMilliseconds(now, receivedAt)\n  return age < normalKillmailAgeMs * scaledValue\n}\n\nconst subscribeMessage = (channel: string) => JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": channel\n})\n\nconst parseKillmail = (raw: WebsocketKillmail): Killmail => {\n  const { killmail_id, killmail_time, victim, solar_system_id, zkb } = raw\n  const { character_id, corporation_id, alliance_id, ship_type_id } = victim\n  const { url, totalValue } = zkb\n  const time = parseISO(killmail_time)\n\n  return {\n    id: killmail_id,\n    time,\n    receivedAt: new Date(),\n    characterId: character_id,\n    corporationId: corporation_id,\n    allianceId: alliance_id,\n    shipTypeId: ship_type_id,\n    solarSystemId: solar_system_id,\n    url,\n    totalValue,\n    scaledValue: scaleValue(totalValue)\n  }\n}\n\nexport const useKillmails = create<State>(set => ({\n  killmails: {},\n  receiveKillmail: (killmail) => { set(state => ({ killmails: { ...state.killmails, [killmail.id]: killmail } })) },\n  trimKillmails: () => {\n    const shouldKeepNow = shouldKeep.bind(undefined, new Date())\n    set(state => ({ killmails: pickBy(state.killmails, shouldKeepNow) }))\n  }\n}))\n\nexport const useKillmailMonitor = (sourceUrl: string): void => {\n  const receivePing = useConnection(useCallback(state => state.receivePing, []))\n  const trimKillmails = useKillmails(useCallback(state => state.trimKillmails, []))\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n\n  useEffect(() => {\n    const interval = setInterval(trimKillmails, trimIntervalMs)\n    return () => clearInterval(interval)\n  }, [trimKillmails])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage('killstream'))\n      connection.send(subscribeMessage('public'))\n    }\n\n    connection.onmessage = (e) => {\n      const parsed: WebsocketMessage = JSON.parse(e.data)\n\n      if ('killmail_id' in parsed) {\n        receiveKillmail(parseKillmail(parsed))\n      } else if ('tqStatus' in parsed) {\n        receivePing()\n      } else {\n        console.error(parsed)\n      }\n    }\n\n    connection.onclose = (e) => {\n      console.error(e)\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, receiveKillmail, receivePing])\n}\n","import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\nimport { normalKillmailAgeMs } from '../hooks/killmails'\n\nexport const killmailFullyVisibleMs = 500\n\nexport const ageMultiplier = (age: number, scale: number): number => {\n  if (age < killmailFullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, killmailFullyVisibleMs)\n  } else {\n    const fullyInvisibleMs = normalKillmailAgeMs * scale\n    const t = THREE.MathUtils.smoothstep(age, killmailFullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 10_000_000_000\nconst minValueMultiplier = 1\nconst maxValueMultiplier = 10\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import React, { useRef, useContext } from 'react'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\nimport { useMinViewportSize } from './utils/scaling'\nimport { useFrame } from 'react-three-fiber'\n\nconst viewportRelativeScale = 75\n\nconst Stars: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n    const solarSystemArray = Object.values(solarSystems)\n\n    const count = solarSystemArray.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystemArray[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      new THREE.Color(theme.colorMinSec).lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize * solarSystem.radius\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Stars\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ageMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 8\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * scaledValue * ageMultiplier(age, scaledValue)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Flares\n","import React, { useContext, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { ageMultiplier, killmailFullyVisibleMs } from './utils/scaling'\nimport { animated, useSpring, OpaqueInterpolation } from 'react-spring'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ThemeContext } from 'styled-components'\n\nconst TickerContainer = styled.div`\n  overflow: hidden;\n  max-height: calc(100vh - ${({ theme }) => theme.unit}px);\n  display: flex;\n  flex-flow: column;\n`\n\nconst EntryContainer = styled(animated.div)`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  padding-bottom: ${({ theme }) => theme.gapSize}px;\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  height: OpaqueInterpolation<any>\n  href?: string,\n  size: number\n}> = ({ src, area, href, height, size }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <animated.img\n      src={`${src}?size=${size}`}\n      style={{ height, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst animationStepNormal = 1000\nconst animationStepFast = 250\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n}> = React.memo(({ killmail }) => {\n  const { unit } = useContext(ThemeContext)\n  const { characterId, corporationId, allianceId, shipTypeId, url, receivedAt, scaledValue } = killmail\n\n  const [{ height, paddingBottom, opacity }, set] = useSpring(() => ({ opacity: 0, height: 0, paddingBottom: 0 }))\n\n  useEffect(() => {\n    const height = unit\n    const paddingBottom = unit / 8\n    const animate = () => {\n      const age = differenceInMilliseconds(new Date(), receivedAt)\n      if (age < killmailFullyVisibleMs) {\n        set({ opacity: 1, height, paddingBottom, config: { duration: animationStepFast } })\n      } else {\n        const opacity = ageMultiplier(age, scaledValue)\n        if (opacity > 0.1) {\n          set({ opacity, height, paddingBottom, config: { duration: animationStepNormal } })\n        } else {\n          set({ opacity: 0, height: 0, paddingBottom: 0, config: { duration: animationStepFast } })\n        }\n      }\n    }\n\n    const interval = setInterval(animate, animationStepNormal)\n    animate()\n    return () => clearInterval(interval)\n  }, [set, receivedAt, scaledValue, unit])\n\n  return <EntryContainer style={{ opacity, paddingBottom, gridAutoRows: height }}>\n    {shipTypeId && <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      height={height}\n      href={url}\n      size={unit}\n    />}\n    {characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      height={height}\n      href={`https://zkillboard.com/character/${characterId}/`}\n      size={unit}\n    />}\n    {corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      height={height}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n      size={unit}\n    />}\n    {allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      height={height}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n      size={unit}\n    />}\n  </EntryContainer>\n})\n\nconst KillmailTicker: React.FC<{\n  killmails: Killmail[]\n}> = ({ killmails }) => {\n  const entries = killmails.map(km => <KillmailEntry killmail={km} key={km.id} />)\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import create from 'zustand'\n\nexport enum CameraMode {\n  full,\n  follow\n}\n\ntype State = {\n  cameraMode: CameraMode,\n  showRegionNames: boolean,\n  setCameraMode: (mode: CameraMode) => void,\n  toggleRegionNames: () => void\n}\n\nexport const useConfiguration = create<State>(set => ({\n  cameraMode: CameraMode.full,\n  showRegionNames: false,\n  setCameraMode: (mode) => set({ cameraMode: mode }),\n  toggleRegionNames: () => set(state => ({ showRegionNames: !state.showRegionNames }))\n}))\n","import create from 'zustand'\nimport reduce from 'lodash/reduce'\nimport clamp from 'lodash/clamp'\nimport { useEffect } from 'react'\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n  p: number\n}\n\ninterface RawRegion {\n  x: number\n  y: number\n  z: number\n  n: string\n}\n\ntype UniverseApiResponse = {\n  systems: Record<string, RawSolarSystem>,\n  regions: Record<string, RawRegion>\n}\n\ntype State = {\n  systems: Record<string, SolarSystem>,\n  regions: Record<string, Region>,\n  loaded: boolean,\n  receive: (data: UniverseApiResponse) => void\n}\n\nexport const useSolarSystems = create<State>(set => ({\n  systems: {},\n  regions: {},\n  loaded: false,\n  receive: (data: UniverseApiResponse) => {\n    const regions = reduce(data.regions, (state, region, id) => {\n      const { x, y, z, n } = region\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n\n      }\n      return state\n    }, {} as Record<string, Region>)\n\n    const systems = reduce(data.systems, (state, system, id) => {\n      const { x, y, z, n, r, s, p } = system\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n,\n        radius: clamp(r * 100, 0.5, 1.5),\n        security: s,\n        regionId: p\n      }\n      return state\n    }, {} as Record<string, SolarSystem>)\n\n    set({ regions, systems, loaded: true })\n  }\n}))\n\nconst selectLoaded = (state: State) => state.loaded\nconst selectReceive = (state: State) => state.receive\n\nexport const useSolarSystemData = (sourceUrl: string): void => {\n  const loaded = useSolarSystems(selectLoaded)\n  const receive = useSolarSystems(selectReceive)\n\n  useEffect(() => {\n    if (!loaded) {\n      const abortController = new AbortController()\n\n      fetch(sourceUrl, { signal: abortController.signal }).then(res => res.json()).then(receive)\n\n      return () => abortController.abort()\n    }\n  }, [sourceUrl, loaded, receive])\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useSolarSystems, useKillmails } from './hooks'\nimport { Stats } from 'drei'\nimport random from 'lodash/random'\nimport sample from 'lodash/sample'\nimport { scaleValue } from './utils/scaling'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  flex-flow: column;\n  gap: 1vh;\n`\n\nconst minValue = 10_000\nconst maxValue = 10_000_000_000\n\nlet testId = new Date().getTime()\nconst buildTestKillmail = (value: number, solarSystemId: string) => {\n  testId += 1\n\n  const now = new Date()\n\n  return {\n    id: testId,\n    time: now,\n    receivedAt: now,\n    characterId: 90230071,\n    corporationId: 98076155,\n    allianceId: 99007254,\n    shipTypeId: 22456,\n    solarSystemId: parseInt(solarSystemId),\n    url: 'https://example.com',\n    totalValue: value,\n    scaledValue: scaleValue(value)\n  }\n}\n\nconst DevTools: React.FC<{}> = () => {\n  const statsContainer = useRef(null)\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n  const [activityInterval, setAcitivtyInterval] = useState(1000)\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n\n  const randomSolarSystemId = useCallback(() => sample(Object.keys(solarSystems)) as string, [solarSystems])\n\n  const [statsOn, setStatsOn] = useState(false)\n\n  const [activityOn, setActivityOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (activityOn) {\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 90 ? maxValue : minValue * 1000\n        const id = randomSolarSystemId()\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [activityOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  const [oneSystemFightOn, setOneSystemFightOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (oneSystemFightOn) {\n      const id = randomSolarSystemId()\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 70 ? maxValue : minValue * 1000\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [oneSystemFightOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  return <Container>\n    <label>\n      <input type='checkbox' checked={statsOn} onChange={() => setStatsOn(!statsOn)} />\n      Show FPS\n    </label>\n    <div ref={statsContainer}></div>\n    {statsOn && <Stats parent={statsContainer} />}\n\n    <label>\n      <input type='range' min={500} max={30000} value={activityInterval} onChange={({ target: { value } }) => setAcitivtyInterval(parseInt(value)) }/>\n      <div>\n        Activity interval: {activityInterval}\n      </div>\n    </label>\n\n    <label>\n      <input type='checkbox' checked={activityOn} onChange={() => setActivityOn(!activityOn)} />\n      Constant random activity\n    </label>\n\n    <label>\n      <input type='checkbox' checked={oneSystemFightOn} onChange={() => setOneSystemFightOn(!oneSystemFightOn)} />\n      One system activity\n    </label>\n\n    <button onClick={() => receiveKillmail(buildTestKillmail(random(maxValue / 10, maxValue), randomSolarSystemId()))}>\n      Big boom\n    </button>\n  </Container>\n}\n\nexport default DevTools\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useConnection, useConfiguration } from './hooks'\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'\nimport { CameraMode } from './hooks/configuration'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: grid;\n  grid-template-areas: \"fullscreen connection camera regions\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  direction: rtl;\n`\n\nconst FlatButton = styled.button<{ area: string }>`\n  color: ${({ theme }) => theme.text};\n  background: transparent;\n  border: none;\n  grid-area: ${({ area }) => area};\n  cursor: ${({ onClick }) => onClick ? 'pointer' : 'default'};\n`\n\nconst FullscreenToggle: React.FC = () => {\n  const [fullScreen, setFullScreen] = useState(false)\n\n  const onClick = () => {\n    if (fullScreen) {\n      document.exitFullscreen().then(() => setFullScreen(false))\n    } else {\n      document.getElementById('root')?.requestFullscreen().then(() => setFullScreen(true))\n    }\n  }\n\n  return <FlatButton type='button' title={fullScreen ? 'Exit fullscreen' : 'Go fullscreen'} onClick={onClick} area='fullscreen'>\n    <FontAwesomeIcon icon={fullScreen ? 'compress-arrows-alt' : 'expand-arrows-alt'} />\n  </FlatButton>\n}\n\nconst ConnectionStatus: React.FC = () => {\n  const connected = useConnection(useCallback(state => state.connected, []))\n\n  return <FlatButton type='button' title={connected ? 'Connected to live feed' : 'Disconnected from live feed!'} area='connection'>\n    <FontAwesomeIcon icon={connected ? 'link' : 'unlink'} />\n  </FlatButton>\n}\n\nconst cameraIcon: Record<CameraMode, FontAwesomeIconProps['icon']> = {\n  [CameraMode.full]: 'globe',\n  [CameraMode.follow]: 'video'\n}\n\nconst nextCameraModes: Record<CameraMode, CameraMode> = {\n  [CameraMode.full]: CameraMode.follow,\n  [CameraMode.follow]: CameraMode.full\n}\n\nconst cameraTitles: Record<CameraMode, string> = {\n  [CameraMode.full]: 'Camera: whole map',\n  [CameraMode.follow]: 'Camera: follow the action'\n}\n\nconst CameraStatus: React.FC = () => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const update = useConfiguration(useCallback(state => state.setCameraMode, []))\n\n  const onClick = () => {\n    const nextCameraMode = nextCameraModes[mode]\n    update(nextCameraMode)\n  }\n\n  return <FlatButton type='button' title={cameraTitles[mode]} onClick={onClick} area='camera'>\n    <FontAwesomeIcon icon={cameraIcon[mode]} />\n  </FlatButton>\n}\n\nconst RegionNames: React.FC = () => {\n  const enabled = useConfiguration(useCallback(state => state.showRegionNames, []))\n  const toggle = useConfiguration(useCallback(state => state.toggleRegionNames, []))\n\n  return <FlatButton type='button' title={enabled ? 'Region names shown' : 'Region names hidden'} onClick={toggle} area='regions'>\n    <FontAwesomeIcon icon={enabled ? 'list-alt' : 'list'} />\n  </FlatButton>\n}\n\nconst Controls: React.FC = () => {\n  return <Container>\n    <FullscreenToggle />\n    <ConnectionStatus />\n    <CameraStatus />\n    <RegionNames />\n  </Container>\n}\n\nexport default Controls\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { PerspectiveCamera } from 'drei'\nimport * as THREE from 'three'\nimport { CameraMode } from './hooks/configuration'\nimport { positionToArray, HasPosition } from './utils/geometry'\nimport { useFrame } from 'react-three-fiber'\nimport { ageMultiplier } from './utils/scaling'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useConfiguration } from './hooks'\n\nconst near = 0.001\nconst far = 100_000\nconst fov = 90\n\nconst defaultPosition = new THREE.Vector3(0, 0, 700)\n\nconst minRadius = defaultPosition.z / 3\nconst movementMultiplier = 0.01\n\nconst lookAtPoints = (points: HasPosition[]): THREE.Vector3 => {\n  const count = points.length\n\n  const positions = new Float32Array(count * 3)\n\n  for (let index = 0; index < count; index++) {\n    positionToArray(points[index], positions, index)\n  }\n\n  const geometry = new THREE.BufferGeometry()\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n  geometry.computeBoundingSphere()\n  if (geometry.boundingSphere) {\n    const { center, radius } = geometry.boundingSphere\n\n    center.z += Math.max(radius * 1.1, minRadius)\n    return center\n  } else {\n    return defaultPosition\n  }\n}\n\nconst Camera: React.FC<{\n  solarSystems: Record<string, SolarSystem>,\n  killmails: React.MutableRefObject<Killmail[]>\n}> = React.memo(({ solarSystems, killmails }) => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const ref = useRef<THREE.PerspectiveCamera>()\n  const position = useRef(defaultPosition)\n\n  useEffect(() => {\n    const solarSystemArray = Object.values(solarSystems)\n    if (solarSystemArray.length > 0) {\n      position.current = lookAtPoints(solarSystemArray)\n      if (ref.current) {\n        ref.current.position.lerp(position.current, 1)\n      }\n    }\n  }, [solarSystems])\n\n  useFrame(() => {\n    if (ref.current && position.current) {\n      let target: THREE.Vector3\n\n      const count = killmails.current?.length || 0\n\n      if (count > 0 && mode === CameraMode.follow) {\n        const now = new Date()\n\n        let maxX = -Infinity\n        let maxY = -Infinity\n        let maxZ = -Infinity\n\n        let minX = +Infinity\n        let minY = +Infinity\n        let minZ = +Infinity\n\n        let totalX = 0\n        let totalY = 0\n        let totalZ = 0\n\n        let totalScale = 0\n\n        for (let index = 0; index < count; index++) {\n          const { solarSystemId, scaledValue, receivedAt } = killmails.current[index]\n          const { x, y, z } = solarSystems[solarSystemId]\n\n          const age = differenceInMilliseconds(now, receivedAt)\n          const scale = scaledValue * ageMultiplier(age, scaledValue)\n\n          if (scale > 0.1) {\n            const scaledX = scale * x\n            const scaledY = scale * y\n            const scaledZ = scale * z\n\n            maxX = Math.max(maxX, x)\n            maxY = Math.max(maxY, y)\n            maxZ = Math.max(maxZ, z)\n\n            minX = Math.min(minX, x)\n            minY = Math.min(minY, y)\n            minZ = Math.min(minZ, z)\n\n            totalX += scaledX\n            totalY += scaledY\n            totalZ += scaledZ\n\n            totalScale += scale\n          }\n        }\n\n        if (totalScale > 0) {\n          const x = totalX / totalScale\n          const y = totalY / totalScale\n          const z = totalZ / totalScale\n\n          const radius = Math.max(\n            maxX - x,\n            maxY - y,\n            maxZ - z,\n            x - minX,\n            y - minY,\n            z - minZ,\n            minRadius\n          )\n\n          target = new THREE.Vector3(x, y, z + radius * 1.1)\n        } else {\n          target = position.current.clone()\n        }\n      } else {\n        target = position.current.clone()\n      }\n\n      if (ref.current.aspect < 1) {\n        // for taller-than-wider screens, the default fitment doesn't work. so we \"zoom out\" by scaling along z axis\n        target.multiply(new THREE.Vector3(1, 1, 1 / ref.current.aspect))\n      }\n\n      ref.current.position.lerp(target, movementMultiplier)\n    }\n  })\n\n  return <>\n    <PerspectiveCamera\n      ref={ref}\n      makeDefault\n      near={near}\n      far={far}\n      fov={fov}\n    />\n  </>\n})\n\nexport default Camera\n","import React, { memo} from 'react'\nimport { EffectComposer, Bloom, Noise, Vignette } from 'react-postprocessing'\nimport { useThree } from 'react-three-fiber'\n\nconst Effects: React.FC = () => {\n  const { gl } = useThree()\n  // Multisampling kills WebGL renderer on low power devices. This seems to be reasonable way of detection.\n  const multisampling = gl.capabilities.maxTextureSize > 8192 ? 8 : 0\n\n  return <EffectComposer multisampling={multisampling}>\n    <Bloom luminanceThreshold={0.2} luminanceSmoothing={0.9} intensity={3} />\n    <Noise opacity={0.04} />\n    <Vignette eskil={false} offset={0.1} darkness={1.1} />\n  </EffectComposer>\n}\n\nexport default memo(Effects)\n","import React, { useContext, memo, useCallback } from 'react'\nimport * as THREE from 'three'\nimport { ThemeContext } from 'styled-components'\nimport { useConfiguration, useSolarSystems } from './hooks'\nimport pickBy from 'lodash/pickBy'\nimport { Text } from 'drei'\n\nconst RegionNames: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const theme = useContext(ThemeContext)\n  const enabled = useConfiguration(useCallback(state => state.showRegionNames, []))\n\n  const regions = useSolarSystems(useCallback(state => {\n    const regionIds = new Set()\n    for (const solarSystem of Object.values(solarSystems)) {\n      regionIds.add(solarSystem.regionId)\n    }\n\n    return Object.values(pickBy(state.regions, region => regionIds.has(region.id)))\n  }, [solarSystems]))\n\n  if (!enabled) {\n    return null\n  }\n\n  const texts = regions.map(region => {\n    const { id, x, y, z, name } = region\n\n    const position = new THREE.Vector3(x, y, z)\n\n    return <Text\n      anchorX='center'\n      anchorY='middle'\n      position={position}\n      color={theme.text}\n      fontSize={theme.regionFontSize}\n      key={id}\n    >\n      {name}\n    </Text>\n  })\n\n  return <>{texts}</>\n}\n\nexport default memo(RegionNames)\n","import React, { useRef, useEffect, useCallback, memo } from 'react'\nimport styled, { createGlobalStyle, ThemeProvider, ThemeContext } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport { theme } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport KillmailTicker from './KillmailTicker'\nimport { useKillmails, useSolarSystems, useConnectionStatus, useKillmailMonitor, useSolarSystemData } from './hooks'\nimport DevTools from './DevTools'\nimport Controls from './Controls'\nimport Camera from './Camera'\nimport sortBy from 'lodash/sortBy'\nimport reduce from 'lodash/reduce'\nimport Effects from './Effects'\nimport RegionNames from './RegionNames'\n\nconst devMode = process.env.NODE_ENV === 'development'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${({ theme }) => theme.background};\n    overflow: hidden;\n  }\n\n  canvas {\n    outline: 0;\n  }\n`\n\nconst TopLeft = styled.div`\n  position: absolute;\n  top: 1vmin;\n  left: 1vmin;\n`\n\nconst TopRight = styled.div`\n  position: absolute;\n  top: 1vmin;\n  right: 1vmin;\n`\n\nconst Visuals: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = memo(({ solarSystems, killmails }) => {\n  return <Canvas onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n    <ThemeContext.Provider value={theme}>\n      <ambientLight />\n\n      <Stars solarSystems={solarSystems} />\n      <Flares solarSystems={solarSystems} killmails={killmails} />\n      <RegionNames solarSystems={solarSystems} />\n\n      <Camera solarSystems={solarSystems} killmails={killmails} />\n\n      <Effects />\n    </ThemeContext.Provider>\n  </Canvas>\n})\n\nconst App: React.FC<{}> = () => {\n  useKillmailMonitor('wss://zkillboard.com/websocket/')\n  useSolarSystemData(process.env.PUBLIC_URL + '/data/universe.json')\n  useConnectionStatus()\n\n  const killmailsRef = useRef<Killmail[]>([])\n\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n\n  const killmails = useKillmails(useCallback(state => {\n    const inCurrentSystems = reduce(state.killmails, (arr, km) => {\n      if (solarSystems[km.solarSystemId]) {\n        arr.push(km)\n      }\n      return arr\n    }, [] as Killmail[])\n    return sortBy(inCurrentSystems, 'receivedAt').reverse()\n  }, [solarSystems]))\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <ThemeProvider theme={theme}>\n    <GlobalStyle />\n\n    <Visuals solarSystems={solarSystems} killmails={killmailsRef} />\n\n    <TopLeft>\n      <KillmailTicker killmails={killmails} />\n    </TopLeft>\n\n    <TopRight>\n      <Controls />\n      {devMode && <DevTools />}\n    </TopRight>\n  </ThemeProvider>\n}\n\nexport default App;\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe, faList, faListAlt\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe, faList, faListAlt)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './utils/fontawesome'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Component />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    console.clear()\n    render(NextApp)\n  })\n}\n"],"sourceRoot":""}
{"version":3,"sources":["calculations.ts","useKillmails.tsx","CameraControls.tsx","Map.tsx","KillmailEntry.tsx","App.tsx","useSolarSytems.tsx","index.tsx","glow.png"],"names":["ageMultiplier","age","THREE","smoothstep","t","MAX_KILLMAIL_AGE_SEC","Math","pow","scaleValue","value","normalized","clamp","mapLinear","subscribeMessage","JSON","stringify","reduceKillmails","state","action","type","payload","killmail_id","killmail_time","victim","solar_system_id","zkb","killmail","id","time","parseISO","receivedAt","Date","characterId","character_id","corporationId","corporation_id","allianceId","alliance_id","shipTypeId","ship_type_id","solarSystemId","url","totalValue","scaledValue","uniqBy","now","filter","differenceInSeconds","extend","OrbitControls","CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","_state","current","update","ref","args","flareTexture","loadTexture","glow","uniforms","color","pointTexture","colorMaxSec","colorMinSec","colorFlare","Points","forwardRef","_props","attach","vertexShader","fragmentShader","blending","depthTest","transparent","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","attributes","position","needsUpdate","flareColor","size","tempVector","vectorize","x","y","z","Stars","solarSystems","pointsRef","useLayoutEffect","length","index","solarSystem","toArray","clone","lerp","security","Indicators","killmails","solarSystemLookup","useMemo","keyBy","flares","differenceInMilliseconds","systemsWithKills","Object","keys","React","memo","near","far","onCreated","setClearColor","Container","styled","div","UNIT","Data","pre","Image","src","area","style","height","width","gridArea","KillmailEntry","App","props","sourceUrl","useReducer","dispatch","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","parse","data","close","useKillmails","useState","setSolarSystems","fetch","then","res","json","entries","map","r","s","n","parseInt","name","radius","useSolarSystems","killmailsRef","km","key","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.15071f7a.chunk.js","sourcesContent":["import * as THREE from 'three'\n\nexport const MAX_KILLMAIL_AGE_SEC = 60\n\nconst fullyVisibleMs = 500\nconst fullyInvisibleMs = MAX_KILLMAIL_AGE_SEC * 1000\n\nexport const ageMultiplier = (age: number): number => {\n  if (age < fullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, fullyVisibleMs)\n  } else {\n    const t = THREE.MathUtils.smoothstep(age, fullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 100_000_000_000\nconst minValueMultiplier = 0.5\nconst maxValueMultiplier = 5\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n","import { useEffect, useReducer } from 'react'\nimport parseISO from 'date-fns/parseISO'\nimport differenceInSeconds from 'date-fns/differenceInSeconds'\nimport uniqBy from 'lodash/uniqBy'\nimport { scaleValue, MAX_KILLMAIL_AGE_SEC } from './calculations'\n\nconst subscribeMessage = JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": \"killstream\"\n})\n\nconst decayIntervalMs = 10 * 1000\n\ntype UnparsedTimestamp = string\n\ninterface WebsocketKillmail {\n  killmail_id: number\n  killmail_time: UnparsedTimestamp\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\nexport interface Killmail {\n  id: number\n  time: Date\n  receivedAt: Date\n  characterId: number\n  corporationId: number\n  allianceId?: number\n  shipTypeId: number\n  solarSystemId: number\n  url: string\n  totalValue: number\n  scaledValue: number\n}\n\ntype ReceiveWebsocketAction = {\n  type: 'RECEIVE_WEBSOCKET'\n  payload: WebsocketKillmail\n}\n\ntype DecayAction = {\n  type: 'DECAY'\n}\n\ntype KillmailAction = ReceiveWebsocketAction | DecayAction\n\nfunction reduceKillmails(state: Killmail[], action: KillmailAction): Killmail[] {\n  // console.log(action)\n  switch (action.type) {\n    case 'RECEIVE_WEBSOCKET': {\n      const { killmail_id, killmail_time, victim, solar_system_id, zkb } = action.payload\n\n      const time = parseISO(killmail_time)\n\n      const killmail: Killmail = {\n        id: killmail_id,\n        time,\n        receivedAt: new Date(),\n        characterId: victim.character_id,\n        corporationId: victim.corporation_id,\n        allianceId: victim.alliance_id,\n        shipTypeId: victim.ship_type_id,\n        solarSystemId: solar_system_id,\n        url: zkb.url,\n        totalValue: zkb.totalValue,\n        scaledValue: scaleValue(zkb.totalValue)\n      }\n\n      return uniqBy([killmail, ...state], 'id')\n    }\n    case 'DECAY': {\n      const now = new Date()\n      return state.filter(killmail => differenceInSeconds(now, killmail.receivedAt) < MAX_KILLMAIL_AGE_SEC)\n    }\n    default:\n      return state\n  }\n}\n\nexport function useKillmails(props: { sourceUrl: string }): Killmail[] {\n  const { sourceUrl } = props\n  const [killmails, dispatch] = useReducer(reduceKillmails, [])\n\n  useEffect(() => {\n    const interval = setInterval(() => dispatch({ type: 'DECAY' }), decayIntervalMs)\n    return () => clearInterval(interval)\n  }, [dispatch])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage)\n    }\n\n    connection.onmessage = (e) => {\n      const killmail: WebsocketKillmail = JSON.parse(e.data)\n      dispatch({ type: 'RECEIVE_WEBSOCKET', payload: killmail })\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, dispatch])\n\n  return killmails\n}\n","import React, {  useRef } from 'react'\nimport { useFrame, extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\nextend({ OrbitControls })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: React.DetailedHTMLProps<any, any>\n    }\n  }\n}\n\nexport const CameraControls: React.FC<{}> = () => {\n  const { camera, gl: { domElement } } = useThree()\n  const controls = useRef<OrbitControls>()\n  useFrame(_state => controls.current?.update())\n  return <orbitControls ref={controls} args={[camera, domElement]} />;\n};\n","import React, { useMemo, useRef, useLayoutEffect, forwardRef } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { SolarSystem } from './useSolarSytems'\nimport * as THREE from 'three'\nimport { CameraControls } from './CameraControls'\nimport glow from './glow.png'\nimport { Killmail } from './useKillmails'\nimport keyBy from 'lodash/keyBy'\nimport { Dictionary } from 'lodash'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ageMultiplier } from './calculations'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = THREE.ImageUtils.loadTexture(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst systemSize = 4\nconst baseFlareSize = 150\nconst maxFlareSize = 1000\n\nconst colorMaxSec = new THREE.Color('#2A9FD6')\nconst colorMinSec = new THREE.Color('#E6E6E6')\nconst colorFlare = new THREE.Color('#E60000')\nconst backgroundColor = '#060606'\n\nconst Points = forwardRef((_props, ref) => <points ref={ref as any}>\n  <bufferGeometry attach=\"geometry\" />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nconst buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nconst setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\nconst tempVector = new THREE.Vector3()\nconst vectorize = ({ x, y, z}: { x: number, y: number, z: number }) => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  return tempVector\n}\n\nconst Stars: React.FC<{\n  solarSystems: SolarSystem[]\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  useLayoutEffect(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const count = solarSystems.length\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystems[index]\n\n      vectorize(solarSystem).toArray(positions, index * 3)\n\n      colorMinSec.clone().lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  }, [solarSystems])\n\n  return <Points ref={pointsRef} />\n}\n\nconst Indicators: React.FC<{\n  solarSystems: SolarSystem[]\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points>()\n\n  const solarSystemLookup = useMemo(() => keyBy(solarSystems, 'id'), [solarSystems])\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const flares: Dictionary<number> = {}\n\n    const now = new Date()\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      const value = baseFlareSize * scaledValue * ageMultiplier(age)\n\n      flares[solarSystemId] = THREE.MathUtils.clamp((flares[solarSystemId] || 0) + value, 0, maxFlareSize)\n    }\n\n    const systemsWithKills = Object.keys(flares)\n    const count = systemsWithKills.length\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystemId = systemsWithKills[index]\n      const solarSystem = solarSystemLookup[solarSystemId] || {}\n\n      vectorize(solarSystem).toArray(positions, index * 3)\n\n      colorFlare.toArray(colors, index * 3)\n      scales[index] = flares[solarSystemId]\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nconst Map: React.FC<{\n  solarSystems: SolarSystem[]\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  return <Canvas camera={{ position: [0, 0, 1_000], near: 0.001, far: 10_000 }} onCreated={({ gl }) => gl.setClearColor(backgroundColor)}>\n    <Stars solarSystems={solarSystems} />\n    <Indicators solarSystems={solarSystems} killmails={killmails} />\n    <CameraControls />\n    <ambientLight />\n  </Canvas>\n}\n\nexport default React.memo(Map)\n","import React from 'react'\nimport { Killmail } from './useKillmails'\nimport styled from 'styled-components'\n\nconst UNIT = 64\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-areas: \"ship character corporation data\"\n                       \"ship character alliance    data\";\n  grid-template-columns: repeat(2, ${UNIT * 2}px) ${UNIT}px 1fr;\n  grid-template-rows: repeat(2, ${UNIT}px);\n  grid-gap: ${UNIT / 8}px;\n`\n\nconst Data = styled.pre`\n  grid-area: data;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  size: number\n}> = ({ src, area, size }) => {\n  return <img src={`${src}?size=${size}`} style={{ height: size, width: size, gridArea: area }} />\n}\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n}> = ({ killmail }) => {\n  const { characterId, corporationId, allianceId, totalValue, scaledValue, shipTypeId } = killmail\n\n  return <Container>\n    {shipTypeId && <Image src={`https://images.evetech.net/types/${shipTypeId}/render`} area='ship' size={UNIT * 2} />}\n    {characterId && <Image src={`https://images.evetech.net/characters/${characterId}/portrait`} area='character' size={UNIT * 2} />}\n    {corporationId && <Image src={`https://images.evetech.net/corporations/${corporationId}/logo`} area='corporation' size={UNIT} />}\n    {allianceId && <Image src={`https://images.evetech.net/alliances/${allianceId}/logo`} area='alliance' size={UNIT} />}\n    <Data>\n      <div>{totalValue}</div>\n      <div>{scaledValue}</div>\n    </Data>\n  </Container>\n}\n\nexport default KillmailEntry\n","import React, { useRef, useEffect } from 'react'\nimport { useKillmails } from './useKillmails'\nimport { useSolarSystems } from './useSolarSytems'\nimport Map from './Map'\nimport KillmailEntry from './KillmailEntry'\n\nconst App: React.FC<{}> = () => {\n  const sourceUrl = 'wss://zkillboard.com/websocket/'\n  const killmails = useKillmails({ sourceUrl })\n  const solarSystems = useSolarSystems()\n  const killmailsRef = useRef<typeof killmails>([])\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <>\n    <div style={{height: 600}}>\n      {solarSystems.length > 0 && <Map solarSystems={solarSystems} killmails={killmailsRef} />}\n    </div>\n    {killmails.map(km => <KillmailEntry killmail={km} key={km.id} />)}\n  </>\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\n\nexport interface SolarSystem {\n  id: number\n  name: string\n  x: number\n  y: number\n  z: number\n  radius: number\n  security: number\n}\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n}\n\nexport function useSolarSystems(): SolarSystem[] {\n  const [solarSystems, setSolarSystems] = useState<SolarSystem[]>([])\n\n  useEffect(() => {\n    fetch('data/solarSystems.json').then(res => res.json()).then((data: Record<string, RawSolarSystem>) => {\n      const solarSystems = Object.entries(data).map(([id, { x, y, z, r, s, n }]) => {\n        return {\n          id: parseInt(id),\n          x,\n          y: z,\n          z: y, // transform top-down view to frontal\n          name: n,\n          radius: r,\n          security: s\n        } as SolarSystem\n      })\n\n      setSolarSystems(solarSystems)\n    })\n  }, [])\n\n  return solarSystems\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";"],"sourceRoot":""}
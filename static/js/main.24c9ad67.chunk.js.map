{"version":3,"sources":["glow.png","hooks/configuration.ts","utils/theme.ts","utils/geometry.ts","Points.tsx","hooks/connection.ts","hooks/killmails.ts","utils/scaling.ts","Stars.tsx","Flares.tsx","hooks/solarSystems.ts","KillmailTicker.tsx","DevTools.tsx","Controls.tsx","Camera.tsx","Effects.tsx","RegionNames.tsx","FocusIndicator.tsx","utils/formatting.ts","App.tsx","utils/fontawesome.ts","index.tsx"],"names":["module","exports","CameraMode","theme","background","colorMaxSec","colorMinSec","flare","text","unit","gapSize","regionFontSize","buildAttributes","count","positions","Float32Array","colors","scales","setAttributes","geometry","setAttribute","THREE","attributes","position","needsUpdate","flareColor","size","tempVector","positionToArray","target","index","x","y","z","toArray","flareTexture","load","glow","uniforms","color","value","pointTexture","Points","forwardRef","props","ref","attach","vertexShader","fragmentShader","blending","depthTest","transparent","useConnection","create","set","connected","pingReceived","undefined","receivePing","Date","checkConnection","differenceInMilliseconds","shouldKeep","now","killmail","scaledValue","receivedAt","subscribeMessage","channel","JSON","stringify","useKillmails","killmails","focused","receiveKillmail","state","id","trimKillmails","shouldKeepNow","bind","pickBy","changes","focus","unfocus","useKillmailMonitor","sourceUrl","useCallback","useEffect","interval","setInterval","clearInterval","connection","WebSocket","onopen","send","onmessage","e","parsed","parse","data","raw","killmail_id","killmail_time","victim","solar_system_id","zkb","character_id","corporation_id","alliance_id","ship_type_id","url","totalValue","time","parseISO","characterId","corporationId","allianceId","shipTypeId","solarSystemId","scaleValue","parseKillmail","console","error","onclose","close","effectiveMultiplier","age","scale","smoothstep","fullyInvisibleMs","t","Math","pow","ageMultiplier","normalized","clamp","mapLinear","useMinViewportSize","useThree","height","width","min","Stars","solarSystems","pointsRef","useRef","useContext","ThemeContext","minViewportSize","useFrame","current","solarSystemArray","Object","values","length","systemSize","solarSystem","lerp","security","radius","Flares","baseFlareSize","colorFlare","useConfiguration","cameraMode","full","showRegionNames","setCameraMode","mode","toggleRegionNames","useSolarSystems","systems","regions","loaded","receive","reduce","region","n","parseInt","name","system","r","s","p","regionId","selectLoaded","selectReceive","TickerContainer","styled","div","EntryContainer","animated","ImageLink","a","area","Image","src","href","img","style","alt","KillmailEntry","memo","useSpring","opacity","paddingBottom","isFocused","isActive","subscribe","animate","duration","multiplier","config","onMouseEnter","onMouseLeave","gridAutoRows","KillmailTicker","entries","map","km","key","getTime","Container","FlatButton","button","onClick","FullscreenToggle","useState","fullScreen","setFullScreen","type","title","document","exitFullscreen","then","getElementById","requestFullscreen","icon","ConnectionStatus","cameraIcon","follow","nextCameraModes","cameraTitles","CameraStatus","update","RegionNames","enabled","toggle","Controls","defaultPosition","minRadius","Camera","React","points","computeBoundingSphere","boundingSphere","center","max","lookAtPoints","maxX","Infinity","maxY","maxZ","minX","minY","minZ","totalX","totalY","totalZ","totalScale","scaledX","scaledY","scaledZ","clone","aspect","multiply","makeDefault","near","far","fov","multisampling","gl","capabilities","maxTextureSize","luminanceThreshold","luminanceSmoothing","intensity","eskil","offset","darkness","regionIds","Set","add","has","texts","anchorX","anchorY","fontSize","focusedKillmail","focusedSolarSystem","focusedRegion","lineRef","textRef","camera","textX","textY","textZ","textAnchorX","textAnchorY","textSize","cameraX","cameraY","cameraZOffset","lineOffset","offsetX","offsetY","offsetZ","xStart","yStart","zStart","xHorizontalStart","xHorizontalEnd","yHorizontal","zHorizontal","locationName","billion","round","million","thousand","textObject","children","GlobalStyle","createGlobalStyle","reset","TopLeft","TopRight","Visuals","onCreated","setClearColor","Provider","App","abortController","AbortController","fetch","signal","res","json","abort","useSolarSystemData","process","useConnectionStatus","killmailsRef","inCurrentSystems","arr","push","sortBy","reverse","library","faCompressArrowsAlt","faExpandArrowsAlt","faLink","faUnlink","faVideo","faGlobe","faList","faListAlt","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.24c9ad67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.3b6b0c75.png\";","import create from 'zustand'\n\nexport enum CameraMode {\n  full,\n  follow\n}\n\ntype State = {\n  cameraMode: CameraMode,\n  showRegionNames: boolean,\n  setCameraMode: (mode: CameraMode) => void,\n  toggleRegionNames: () => void\n}\n\nexport const useConfiguration = create<State>(set => ({\n  cameraMode: CameraMode.full,\n  showRegionNames: false,\n  setCameraMode: (mode) => set({ cameraMode: mode }),\n  toggleRegionNames: () => set(state => ({ showRegionNames: !state.showRegionNames }))\n}))\n","export const theme = {\n  background: '#060606',\n  colorMaxSec: '#2A9FD6',\n  colorMinSec: '#E6E6E6',\n  flare: '#E60000',\n  text: '#E6E6E6',\n  unit: 32,\n  gapSize: 8,\n  regionFontSize: 8\n}\n\nexport type Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}\n","import * as THREE from 'three'\n\nexport const buildAttributes = (count: number) => ({\n  positions: new Float32Array(count * 3),\n  colors: new Float32Array(count * 3),\n  scales: new Float32Array(count)\n})\n\nexport const setAttributes = (geometry: THREE.BufferGeometry, positions: Float32Array, colors: Float32Array, scales: Float32Array) => {\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n  geometry.setAttribute('flareColor', new THREE.BufferAttribute(colors, 3))\n  geometry.setAttribute('size', new THREE.BufferAttribute(scales, 1))\n\n  geometry.attributes.position.needsUpdate = true\n  geometry.attributes.flareColor.needsUpdate = true\n  geometry.attributes.size.needsUpdate = true\n}\n\nexport interface HasPosition {\n x: number\n y: number\n z: number\n}\n\nconst tempVector = new THREE.Vector3()\nexport const positionToArray = ({ x, y, z }: HasPosition, target: Float32Array, index: number): void => {\n  tempVector.x = x\n  tempVector.y = y\n  tempVector.z = z\n  tempVector.toArray(target, index * 3)\n}\n\n","import React, { forwardRef } from 'react'\nimport * as THREE from 'three'\nimport glow from './glow.png'\n\nconst VERTEX_SHADER = `\n  attribute float size;\n  attribute vec3 flareColor;\n\n  varying vec3 vColor;\n\n  void main() {\n    vColor = flareColor;\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    gl_PointSize = size * (300.0 / -mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`\n\nconst FRAGMENT_SHADER = `\n  uniform vec3 color;\n  uniform sampler2D pointTexture;\n\n  varying vec3 vColor;\n\n  void main() {\n    gl_FragColor = vec4(color * vColor, 1.0);\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n  }\n`\n\nconst flareTexture = new THREE.TextureLoader().load(glow)\n\nconst uniforms = {\n  color: { value: new THREE.Color() },\n  pointTexture: { value: flareTexture }\n}\n\nconst Points = forwardRef<THREE.Points<THREE.BufferGeometry>>((props, ref) => <points ref={ref} {...props} >\n  <bufferGeometry attach='geometry' />\n  <shaderMaterial\n    uniforms={uniforms}\n    vertexShader={VERTEX_SHADER}\n    fragmentShader={FRAGMENT_SHADER}\n    blending={THREE.AdditiveBlending}\n    depthTest={false}\n    transparent={true}\n    attach='material'\n  />\n</points>)\n\nexport default Points\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect } from 'react'\nimport create from 'zustand'\n\nconst normalIntervalBetweenPingsMs = 15 * 1000\nconst checkInterval = 5 * 1000\n\ntype State = {\n  connected: boolean,\n  pingReceived?: Date,\n  receivePing: () => void,\n  checkConnection: () => void\n}\n\nexport const useConnection = create<State>(set => ({\n  connected: false,\n  pingReceived: undefined,\n  receivePing: () => set({ connected: true, pingReceived: new Date() }),\n  checkConnection: () => set(({ pingReceived }) => {\n    const connected = pingReceived ? differenceInMilliseconds(new Date(), pingReceived) < normalIntervalBetweenPingsMs : false\n    return { connected }\n  })\n}))\n\nexport const useConnectionStatus = () => {\n  const checkConnection = useConnection(useCallback(state => state.checkConnection, []))\n\n  useEffect(() => {\n    const interval = setInterval(checkConnection, checkInterval)\n    return () => clearInterval(interval)\n  }, [checkConnection])\n}\n","import differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useCallback, useEffect } from 'react'\nimport pickBy from 'lodash/pickBy'\nimport create from 'zustand'\nimport parseISO from 'date-fns/parseISO'\nimport { scaleValue } from '../utils/scaling'\nimport { useConnection } from './connection'\n\nexport const normalKillmailAgeMs = 45 * 1000\nconst trimIntervalMs = 5 * 1000\n\ntype WebsocketStatusMessage = {\n  action: 'tqStatus'\n  tqStatus: string\n  tqCount: string\n  kills: string\n}\n\ntype WebsocketKillmail = {\n  killmail_id: number\n  killmail_time: string\n  solar_system_id: number\n  victim: {\n    alliance_id?: number\n    character_id: number\n    corporation_id: number\n    ship_type_id: number\n    position: {\n      x: number,\n      y: number,\n      z: number\n    }\n  }\n  zkb: {\n    totalValue: number\n    fittedValue: number\n    locationID: number\n    npc: boolean\n    awox: boolean\n    solo: boolean\n    url: string\n  }\n}\n\ntype WebsocketMessage = WebsocketKillmail | WebsocketStatusMessage\n\ntype State = {\n  killmails: Record<string, Killmail>,\n  focused?: Killmail,\n  receiveKillmail: (killmail: Killmail) => void,\n  trimKillmails: () => void,\n  focus: (id: Killmail['id']) => void,\n  unfocus: (id: Killmail['id']) => void\n}\n\nconst shouldKeep = (now: Date, killmail: Killmail) => {\n  const { scaledValue, receivedAt } = killmail\n  const age = differenceInMilliseconds(now, receivedAt)\n  return age < normalKillmailAgeMs * scaledValue\n}\n\nconst subscribeMessage = (channel: string) => JSON.stringify({\n  \"action\": \"sub\",\n  \"channel\": channel\n})\n\nconst parseKillmail = (raw: WebsocketKillmail): Killmail => {\n  const { killmail_id, killmail_time, victim, solar_system_id, zkb } = raw\n  const { character_id, corporation_id, alliance_id, ship_type_id } = victim\n  const { url, totalValue } = zkb\n  const time = parseISO(killmail_time)\n\n  return {\n    id: killmail_id,\n    time,\n    receivedAt: new Date(),\n    characterId: character_id,\n    corporationId: corporation_id,\n    allianceId: alliance_id,\n    shipTypeId: ship_type_id,\n    solarSystemId: solar_system_id,\n    url,\n    totalValue,\n    scaledValue: scaleValue(totalValue)\n  }\n}\n\nexport const useKillmails = create<State>(set => ({\n  killmails: {},\n  focused: undefined,\n  receiveKillmail: (killmail) => { set(state => ({ killmails: { ...state.killmails, [killmail.id]: killmail } })) },\n  trimKillmails: () => {\n    const shouldKeepNow = shouldKeep.bind(undefined, new Date())\n    set(state => {\n      const killmails = pickBy(state.killmails, shouldKeepNow)\n      const changes: Partial<State> = { killmails }\n      if (state.focused && !killmails[state.focused.id]) {\n        changes.focused = undefined\n      }\n      return changes\n    })\n  },\n  focus: (id) => { set(state => ({ focused: state.killmails[id] })) },\n  unfocus: (id) => { set(state => state.focused && state.focused.id === id ? { focused: undefined } : {}) }\n}))\n\nexport const useKillmailMonitor = (sourceUrl: string): void => {\n  const receivePing = useConnection(useCallback(state => state.receivePing, []))\n  const trimKillmails = useKillmails(useCallback(state => state.trimKillmails, []))\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n\n  useEffect(() => {\n    const interval = setInterval(trimKillmails, trimIntervalMs)\n    return () => clearInterval(interval)\n  }, [trimKillmails])\n\n  useEffect(() => {\n    const connection = new WebSocket(sourceUrl)\n\n    connection.onopen = () => {\n      connection.send(subscribeMessage('killstream'))\n      connection.send(subscribeMessage('public'))\n    }\n\n    connection.onmessage = (e) => {\n      const parsed: WebsocketMessage = JSON.parse(e.data)\n\n      if ('killmail_id' in parsed) {\n        receiveKillmail(parseKillmail(parsed))\n      } else if ('tqStatus' in parsed) {\n        receivePing()\n      } else {\n        console.error(parsed)\n      }\n    }\n\n    connection.onclose = (e) => {\n      console.error(e)\n    }\n\n    return () => connection.close()\n  }, [sourceUrl, receiveKillmail, receivePing])\n}\n","import * as THREE from 'three'\nimport { useThree } from 'react-three-fiber'\nimport { normalKillmailAgeMs } from '../hooks/killmails'\n\nexport const killmailFullyVisibleMs = 500\n\nexport const ageMultiplier = (age: number, scale: number): number => {\n  if (age < killmailFullyVisibleMs) {\n    return THREE.MathUtils.smoothstep(age, 0, killmailFullyVisibleMs)\n  } else {\n    const fullyInvisibleMs = normalKillmailAgeMs * scale\n    const t = THREE.MathUtils.smoothstep(age, killmailFullyVisibleMs, fullyInvisibleMs) - 1\n    return Math.pow(t, 4)\n  }\n}\n\nexport const effectiveMultiplier = (age: number, scale: number): number => {\n  return scale * ageMultiplier(age, scale)\n}\n\nconst minValueBound = 10_000\nconst maxValueBound = 10_000_000_000\nconst minValueMultiplier = 1\nconst maxValueMultiplier = 10\n\nexport const scaleValue = (value: number): number => {\n  const normalized = THREE.MathUtils.clamp(value, minValueBound, maxValueBound)\n  return THREE.MathUtils.mapLinear(normalized, minValueBound, maxValueBound, minValueMultiplier, maxValueMultiplier)\n}\n\nexport const useMinViewportSize = () => {\n  const { size: { height, width } } = useThree()\n\n  const minSize = Math.min(height, width)\n\n  return minSize\n}\n","import React, { useRef, useContext } from 'react'\nimport * as THREE from 'three'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\nimport { useMinViewportSize } from './utils/scaling'\nimport { useFrame } from 'react-three-fiber'\n\nconst viewportRelativeScale = 75\n\nconst Stars: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const pointsRef = useRef<THREE.Points<THREE.BufferGeometry>>(null)\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!pointsRef.current) {\n      return\n    }\n\n    const colorMaxSec = new THREE.Color(theme.colorMaxSec)\n    const solarSystemArray = Object.values(solarSystems)\n\n    const count = solarSystemArray.length\n\n    const systemSize = minViewportSize / viewportRelativeScale\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < count; index++) {\n      const solarSystem = solarSystemArray[index]\n\n      positionToArray(solarSystem, positions, index)\n\n      new THREE.Color(theme.colorMinSec).lerp(colorMaxSec, solarSystem.security).toArray(colors, index * 3)\n\n      scales[index] = systemSize * solarSystem.radius\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Stars\n","import React, { useRef, useContext } from 'react'\nimport { useFrame } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { effectiveMultiplier, useMinViewportSize } from './utils/scaling'\nimport { buildAttributes, setAttributes, positionToArray } from './utils/geometry'\nimport Points from './Points'\nimport { ThemeContext } from 'styled-components'\n\nconst Flares: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = ({ solarSystems, killmails }) => {\n  const pointsRef = useRef<THREE.Points<THREE.BufferGeometry>>(null)\n\n  const theme = useContext(ThemeContext)\n\n  const minViewportSize = useMinViewportSize()\n\n  useFrame(() => {\n    if (!killmails.current || !pointsRef.current) {\n      return\n    }\n\n    const count = killmails.current.length\n\n    const now = new Date()\n    const baseFlareSize = minViewportSize / 8\n    const colorFlare = new THREE.Color(theme.flare)\n\n    const { positions, colors, scales } = buildAttributes(count)\n\n    for (let index = 0; index < killmails.current.length; index++) {\n      const { receivedAt, solarSystemId, scaledValue } = killmails.current[index]\n\n      const solarSystem = solarSystems[solarSystemId] || {}\n\n      const age = differenceInMilliseconds(now, receivedAt)\n      scales[index] = baseFlareSize * effectiveMultiplier(age, scaledValue)\n\n      positionToArray(solarSystem, positions, index)\n\n      colorFlare.toArray(colors, index * 3)\n    }\n\n    setAttributes(pointsRef.current.geometry as THREE.BufferGeometry, positions, colors, scales)\n  })\n\n  return <Points ref={pointsRef} />\n}\n\nexport default Flares\n","import create from 'zustand'\nimport reduce from 'lodash/reduce'\nimport { useEffect } from 'react'\nimport * as THREE from 'three'\n\ninterface RawSolarSystem {\n  x: number\n  y: number\n  z: number\n  r: number\n  s: number\n  n: string\n  p: number\n}\n\ninterface RawRegion {\n  x: number\n  y: number\n  z: number\n  n: string\n}\n\ntype UniverseApiResponse = {\n  systems: Record<string, RawSolarSystem>,\n  regions: Record<string, RawRegion>\n}\n\ntype State = {\n  systems: Record<string, SolarSystem>,\n  regions: Record<string, Region>,\n  loaded: boolean,\n  receive: (data: UniverseApiResponse) => void\n}\n\nexport const useSolarSystems = create<State>(set => ({\n  systems: {},\n  regions: {},\n  loaded: false,\n  receive: (data: UniverseApiResponse) => {\n    const regions = reduce(data.regions, (state, region, id) => {\n      const { x, y, z, n } = region\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n\n      }\n      return state\n    }, {} as Record<string, Region>)\n\n    const systems = reduce(data.systems, (state, system, id) => {\n      const { x, y, z, n, r, s, p } = system\n      state[id] = {\n        id: parseInt(id),\n        x,\n        y: z,\n        z: y,\n        name: n,\n        radius: THREE.MathUtils.clamp(r * 100, 0.5, 1.5),\n        security: s,\n        regionId: p\n      }\n      return state\n    }, {} as Record<string, SolarSystem>)\n\n    set({ regions, systems, loaded: true })\n  }\n}))\n\nconst selectLoaded = (state: State) => state.loaded\nconst selectReceive = (state: State) => state.receive\n\nexport const useSolarSystemData = (sourceUrl: string): void => {\n  const loaded = useSolarSystems(selectLoaded)\n  const receive = useSolarSystems(selectReceive)\n\n  useEffect(() => {\n    if (!loaded) {\n      const abortController = new AbortController()\n\n      fetch(sourceUrl, { signal: abortController.signal }).then(res => res.json()).then(receive)\n\n      return () => abortController.abort()\n    }\n  }, [sourceUrl, loaded, receive])\n}\n","import React, { useCallback, useContext, useEffect, memo, useRef } from 'react'\nimport styled from 'styled-components'\nimport { effectiveMultiplier, killmailFullyVisibleMs } from './utils/scaling'\nimport { animated, useSpring, OpaqueInterpolation } from 'react-spring'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { ThemeContext } from 'styled-components'\nimport * as THREE from 'three'\nimport { useKillmails } from './hooks'\n\nconst TickerContainer = styled.div`\n  overflow: hidden;\n  max-height: calc(100vh - ${({ theme }) => theme.unit}px);\n  display: flex;\n  flex-flow: column;\n`\n\nconst EntryContainer = styled(animated.div)`\n  display: grid;\n  grid-template-areas: \"ship character corporation alliance\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  padding-bottom: ${({ theme }) => theme.gapSize}px;\n`\n\nconst ImageLink = styled.a<{ area: string }>`\n  grid-area: ${({ area }) => area};\n  text-decoration: none;\n`\n\nconst Image: React.FC<{\n  src: string\n  area: string\n  height: OpaqueInterpolation<any>\n  href?: string,\n  size: number\n}> = ({ src, area, href, height, size }) => {\n  return <ImageLink href={href} area={area} target='_blank'>\n    <animated.img\n      src={`${src}?size=${size}`}\n      style={{ height, width: size }}\n      alt=''\n    />\n  </ImageLink>\n}\n\nconst animationStepNormal = 1000\nconst animationStepFast = 250\nconst animationStepInstant = 50\n\nconst KillmailEntry: React.FC<{\n  killmail: Killmail\n}> = memo(({ killmail }) => {\n  const { unit } = useContext(ThemeContext)\n  const { id, characterId, corporationId, allianceId, shipTypeId, url, receivedAt, scaledValue } = killmail\n\n  const [{ height, paddingBottom, opacity }, set] = useSpring(() => ({ opacity: 0, height: 0, paddingBottom: 0 }))\n\n  const isFocused = useRef(false)\n  const isActive = useRef(true)\n  useEffect(() => useKillmails.subscribe(state => {\n    isFocused.current = state.focused ? state.focused.id === id : false\n  }))\n\n  useEffect(() => {\n    const animate = () => {\n      const age = differenceInMilliseconds(new Date(), receivedAt)\n      let opacity: number\n      let height = unit\n      let paddingBottom = unit / 8\n      let duration = animationStepNormal\n\n      if (age < killmailFullyVisibleMs) { // very new, fade in animation\n        opacity = 1\n        duration = animationStepFast\n      } else {\n        const multiplier = effectiveMultiplier(age, scaledValue)\n        if (multiplier > 0.1) { // reasonably new, keep visible\n          if (isFocused.current) { // is being hovered - keep max brightness\n            opacity = 1\n          } else { // slowly fade out as multiplier drops\n            opacity = THREE.MathUtils.clamp(multiplier, 0, 1)\n          }\n        } else { // old, fade it out\n          opacity = 0\n          height = 0\n          paddingBottom = 0\n          duration = animationStepFast\n        }\n      }\n\n      isActive.current = opacity > 0\n\n      set({ opacity, height, paddingBottom, config: { duration } })\n    }\n\n    const interval = setInterval(animate, animationStepNormal)\n    animate()\n    return () => clearInterval(interval)\n  }, [set, receivedAt, scaledValue, unit])\n\n  const focus = useKillmails(useCallback(state => state.focus, []))\n  const unfocus = useKillmails(useCallback(state => state.unfocus, []))\n\n  const onMouseEnter = useCallback(() => {\n    set({ opacity: 1, config: { duration: animationStepInstant } })\n\n    if (isActive.current) {\n      focus(id)\n    }\n  }, [focus, id, set])\n  const onMouseLeave = useCallback(() => unfocus(id), [unfocus, id])\n\n  return <EntryContainer style={{ opacity, paddingBottom, gridAutoRows: height }} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n    {shipTypeId && <Image\n      src={`https://images.evetech.net/types/${shipTypeId}/render`}\n      area='ship'\n      height={height}\n      href={url}\n      size={unit}\n    />}\n    {characterId && <Image\n      src={`https://images.evetech.net/characters/${characterId}/portrait`}\n      area='character'\n      height={height}\n      href={`https://zkillboard.com/character/${characterId}/`}\n      size={unit}\n    />}\n    {corporationId && <Image\n      src={`https://images.evetech.net/corporations/${corporationId}/logo`}\n      area='corporation'\n      height={height}\n      href={`https://zkillboard.com/corporation/${corporationId}/`}\n      size={unit}\n    />}\n    {allianceId && <Image\n      src={`https://images.evetech.net/alliances/${allianceId}/logo`}\n      area='alliance'\n      height={height}\n      href={`https://zkillboard.com/alliance/${allianceId}/`}\n      size={unit}\n    />}\n  </EntryContainer>\n})\n\nconst KillmailTicker: React.FC<{\n  killmails: Killmail[]\n}> = ({ killmails }) => {\n  const entries = killmails.map(km => <KillmailEntry killmail={km} key={km.id} />)\n\n  return <TickerContainer>\n    {entries}\n  </TickerContainer>\n}\n\nexport default KillmailTicker\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { useSolarSystems, useKillmails } from './hooks'\nimport { Stats } from 'drei'\nimport random from 'lodash/random'\nimport sample from 'lodash/sample'\nimport { scaleValue } from './utils/scaling'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: flex;\n  flex-flow: column;\n  gap: 1vh;\n`\n\nconst minValue = 10_000\nconst maxValue = 10_000_000_000\n\nlet testId = new Date().getTime()\nconst buildTestKillmail = (value: number, solarSystemId: string) => {\n  testId += 1\n\n  const now = new Date()\n\n  return {\n    id: testId,\n    time: now,\n    receivedAt: now,\n    characterId: 90230071,\n    corporationId: 98076155,\n    allianceId: 99007254,\n    shipTypeId: 22456,\n    solarSystemId: parseInt(solarSystemId),\n    url: 'https://example.com',\n    totalValue: value,\n    scaledValue: scaleValue(value)\n  }\n}\n\nconst DevTools: React.FC<{}> = () => {\n  const statsContainer = useRef(null)\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n  const [activityInterval, setAcitivtyInterval] = useState(1000)\n  const receiveKillmail = useKillmails(useCallback(state => state.receiveKillmail, []))\n\n  const randomSolarSystemId = useCallback(() => sample(Object.keys(solarSystems)) as string, [solarSystems])\n\n  const [statsOn, setStatsOn] = useState(false)\n\n  const [activityOn, setActivityOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (activityOn) {\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 90 ? maxValue : minValue * 1000\n        const id = randomSolarSystemId()\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [activityOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  const [oneSystemFightOn, setOneSystemFightOn] = useState(false)\n  useEffect(() => {\n    let timeout: number\n\n    if (oneSystemFightOn) {\n      const id = randomSolarSystemId()\n      const randomInterval = () => random(activityInterval * 0.8, activityInterval * 1.2)\n      const activity = () => {\n        const bigKillChance = random(100)\n        const maxAllowed = bigKillChance > 70 ? maxValue : minValue * 1000\n        const value = random(minValue, maxAllowed)\n        receiveKillmail(buildTestKillmail(value, id))\n        timeout = setTimeout(activity, randomInterval())\n      }\n\n      timeout = setTimeout(activity, randomInterval())\n\n      return () => clearTimeout(timeout)\n    }\n  }, [oneSystemFightOn, receiveKillmail, randomSolarSystemId, activityInterval])\n\n  return <Container>\n    <label>\n      <input type='checkbox' checked={statsOn} onChange={() => setStatsOn(!statsOn)} />\n      Show FPS\n    </label>\n    <div ref={statsContainer}></div>\n    {statsOn && <Stats parent={statsContainer} />}\n\n    <label>\n      <input type='range' min={500} max={30000} value={activityInterval} onChange={({ target: { value } }) => setAcitivtyInterval(parseInt(value)) }/>\n      <div>\n        Activity interval: {activityInterval}\n      </div>\n    </label>\n\n    <label>\n      <input type='checkbox' checked={activityOn} onChange={() => setActivityOn(!activityOn)} />\n      Constant random activity\n    </label>\n\n    <label>\n      <input type='checkbox' checked={oneSystemFightOn} onChange={() => setOneSystemFightOn(!oneSystemFightOn)} />\n      One system activity\n    </label>\n\n    <button onClick={() => receiveKillmail(buildTestKillmail(random(maxValue / 10, maxValue), randomSolarSystemId()))}>\n      Big boom\n    </button>\n  </Container>\n}\n\nexport default DevTools\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useConnection, useConfiguration } from './hooks'\nimport { FontAwesomeIcon, FontAwesomeIconProps } from '@fortawesome/react-fontawesome'\nimport { CameraMode } from './hooks/configuration'\n\nconst Container = styled.div`\n  color: ${({ theme }) => theme.text};\n  display: grid;\n  grid-template-areas: \"fullscreen connection camera regions\";\n  grid-auto-columns: ${({ theme }) => theme.unit}px;\n  grid-auto-rows: ${({ theme }) => theme.unit}px;\n  gap: ${({ theme }) => theme.gapSize}px;\n  direction: rtl;\n`\n\nconst FlatButton = styled.button<{ area: string }>`\n  color: ${({ theme }) => theme.text};\n  background: transparent;\n  border: none;\n  grid-area: ${({ area }) => area};\n  cursor: ${({ onClick }) => onClick ? 'pointer' : 'default'};\n  outline: none;\n`\n\nconst FullscreenToggle: React.FC = () => {\n  const [fullScreen, setFullScreen] = useState(false)\n\n  const onClick = () => {\n    if (fullScreen) {\n      document.exitFullscreen().then(() => setFullScreen(false))\n    } else {\n      document.getElementById('root')?.requestFullscreen().then(() => setFullScreen(true))\n    }\n  }\n\n  return <FlatButton type='button' title={fullScreen ? 'Exit fullscreen' : 'Go fullscreen'} onClick={onClick} area='fullscreen'>\n    <FontAwesomeIcon icon={fullScreen ? 'compress-arrows-alt' : 'expand-arrows-alt'} />\n  </FlatButton>\n}\n\nconst ConnectionStatus: React.FC = () => {\n  const connected = useConnection(useCallback(state => state.connected, []))\n\n  return <FlatButton type='button' title={connected ? 'Connected to live feed' : 'Disconnected from live feed!'} area='connection'>\n    <FontAwesomeIcon icon={connected ? 'link' : 'unlink'} />\n  </FlatButton>\n}\n\nconst cameraIcon: Record<CameraMode, FontAwesomeIconProps['icon']> = {\n  [CameraMode.full]: 'globe',\n  [CameraMode.follow]: 'video'\n}\n\nconst nextCameraModes: Record<CameraMode, CameraMode> = {\n  [CameraMode.full]: CameraMode.follow,\n  [CameraMode.follow]: CameraMode.full\n}\n\nconst cameraTitles: Record<CameraMode, string> = {\n  [CameraMode.full]: 'Camera: whole map',\n  [CameraMode.follow]: 'Camera: follow the action'\n}\n\nconst CameraStatus: React.FC = () => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const update = useConfiguration(useCallback(state => state.setCameraMode, []))\n\n  const onClick = () => {\n    const nextCameraMode = nextCameraModes[mode]\n    update(nextCameraMode)\n  }\n\n  return <FlatButton type='button' title={cameraTitles[mode]} onClick={onClick} area='camera'>\n    <FontAwesomeIcon icon={cameraIcon[mode]} />\n  </FlatButton>\n}\n\nconst RegionNames: React.FC = () => {\n  const enabled = useConfiguration(useCallback(state => state.showRegionNames, []))\n  const toggle = useConfiguration(useCallback(state => state.toggleRegionNames, []))\n\n  return <FlatButton type='button' title={enabled ? 'Region names shown' : 'Region names hidden'} onClick={toggle} area='regions'>\n    <FontAwesomeIcon icon={enabled ? 'list-alt' : 'list'} />\n  </FlatButton>\n}\n\nconst Controls: React.FC = () => {\n  return <Container>\n    <FullscreenToggle />\n    <ConnectionStatus />\n    <CameraStatus />\n    <RegionNames />\n  </Container>\n}\n\nexport default Controls\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport { PerspectiveCamera } from 'drei'\nimport * as THREE from 'three'\nimport { CameraMode } from './hooks/configuration'\nimport { positionToArray, HasPosition } from './utils/geometry'\nimport { useFrame } from 'react-three-fiber'\nimport { effectiveMultiplier } from './utils/scaling'\nimport differenceInMilliseconds from 'date-fns/differenceInMilliseconds'\nimport { useConfiguration } from './hooks'\n\nconst near = 0.001\nconst far = 100_000\nconst fov = 90\n\nconst defaultPosition = new THREE.Vector3(0, 0, 700)\n\nconst minRadius = defaultPosition.z / 3\nconst movementMultiplier = 0.01\n\nconst lookAtPoints = (points: HasPosition[]): THREE.Vector3 => {\n  const count = points.length\n\n  const positions = new Float32Array(count * 3)\n\n  for (let index = 0; index < count; index++) {\n    positionToArray(points[index], positions, index)\n  }\n\n  const geometry = new THREE.BufferGeometry()\n\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n  geometry.computeBoundingSphere()\n  if (geometry.boundingSphere) {\n    const { center, radius } = geometry.boundingSphere\n\n    center.z += Math.max(radius * 1.1, minRadius)\n    return center\n  } else {\n    return defaultPosition\n  }\n}\n\nconst Camera: React.FC<{\n  solarSystems: Record<string, SolarSystem>,\n  killmails: React.MutableRefObject<Killmail[]>\n}> = React.memo(({ solarSystems, killmails }) => {\n  const mode = useConfiguration(useCallback(state => state.cameraMode, []))\n  const ref = useRef<THREE.PerspectiveCamera>()\n  const position = useRef(defaultPosition)\n\n  useEffect(() => {\n    const solarSystemArray = Object.values(solarSystems)\n    if (solarSystemArray.length > 0) {\n      position.current = lookAtPoints(solarSystemArray)\n      if (ref.current) {\n        ref.current.position.lerp(position.current, 1)\n      }\n    }\n  }, [solarSystems])\n\n  useFrame(() => {\n    if (ref.current && position.current) {\n      let target: THREE.Vector3\n\n      const count = killmails.current?.length || 0\n\n      if (count > 0 && mode === CameraMode.follow) {\n        const now = new Date()\n\n        let maxX = -Infinity\n        let maxY = -Infinity\n        let maxZ = -Infinity\n\n        let minX = +Infinity\n        let minY = +Infinity\n        let minZ = +Infinity\n\n        let totalX = 0\n        let totalY = 0\n        let totalZ = 0\n\n        let totalScale = 0\n\n        for (let index = 0; index < count; index++) {\n          const { solarSystemId, scaledValue, receivedAt } = killmails.current[index]\n          const { x, y, z } = solarSystems[solarSystemId]\n\n          const age = differenceInMilliseconds(now, receivedAt)\n          const scale = effectiveMultiplier(age, scaledValue)\n\n          if (scale > 0.1) {\n            const scaledX = scale * x\n            const scaledY = scale * y\n            const scaledZ = scale * z\n\n            maxX = Math.max(maxX, x)\n            maxY = Math.max(maxY, y)\n            maxZ = Math.max(maxZ, z)\n\n            minX = Math.min(minX, x)\n            minY = Math.min(minY, y)\n            minZ = Math.min(minZ, z)\n\n            totalX += scaledX\n            totalY += scaledY\n            totalZ += scaledZ\n\n            totalScale += scale\n          }\n        }\n\n        if (totalScale > 0) {\n          const x = totalX / totalScale\n          const y = totalY / totalScale\n          const z = totalZ / totalScale\n\n          const radius = Math.max(\n            maxX - x,\n            maxY - y,\n            maxZ - z,\n            x - minX,\n            y - minY,\n            z - minZ,\n            minRadius\n          )\n\n          target = new THREE.Vector3(x, y, z + radius * 1.1)\n        } else {\n          target = position.current.clone()\n        }\n      } else {\n        target = position.current.clone()\n      }\n\n      if (ref.current.aspect < 1) {\n        // for taller-than-wider screens, the default fitment doesn't work. so we \"zoom out\" by scaling along z axis\n        target.multiply(new THREE.Vector3(1, 1, 1 / ref.current.aspect))\n      }\n\n      ref.current.position.lerp(target, movementMultiplier)\n    }\n  })\n\n  return <>\n    <PerspectiveCamera\n      ref={ref}\n      makeDefault\n      near={near}\n      far={far}\n      fov={fov}\n    />\n  </>\n})\n\nexport default Camera\n","import React, { memo} from 'react'\nimport { EffectComposer, Bloom, Noise, Vignette } from 'react-postprocessing'\nimport { useThree } from 'react-three-fiber'\n\nconst Effects: React.FC = () => {\n  const { gl } = useThree()\n  // Multisampling kills WebGL renderer on low power devices. This seems to be reasonable way of detection.\n  const multisampling = gl.capabilities.maxTextureSize > 8192 ? 8 : 0\n\n  return <EffectComposer multisampling={multisampling}>\n    <Bloom luminanceThreshold={0.2} luminanceSmoothing={0.9} intensity={3} />\n    <Noise opacity={0.04} />\n    <Vignette eskil={false} offset={0.1} darkness={1.1} />\n  </EffectComposer>\n}\n\nexport default memo(Effects)\n","import React, { useContext, memo, useCallback } from 'react'\nimport * as THREE from 'three'\nimport { ThemeContext } from 'styled-components'\nimport { useConfiguration, useSolarSystems } from './hooks'\nimport pickBy from 'lodash/pickBy'\nimport { Text } from 'drei'\n\nconst RegionNames: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n}> = ({ solarSystems }) => {\n  const theme = useContext(ThemeContext)\n  const enabled = useConfiguration(useCallback(state => state.showRegionNames, []))\n\n  const regions = useSolarSystems(useCallback(state => {\n    const regionIds = new Set()\n    for (const solarSystem of Object.values(solarSystems)) {\n      regionIds.add(solarSystem.regionId)\n    }\n\n    return Object.values(pickBy(state.regions, region => regionIds.has(region.id)))\n  }, [solarSystems]))\n\n  if (!enabled) {\n    return null\n  }\n\n  const texts = regions.map(region => {\n    const { id, x, y, z, name } = region\n\n    const position = new THREE.Vector3(x, y, z)\n\n    return <Text\n      anchorX='center'\n      anchorY='middle'\n      position={position}\n      color={theme.text}\n      fontSize={theme.regionFontSize}\n      key={id}\n    >\n      {name}\n    </Text>\n  })\n\n  return <>{texts}</>\n}\n\nexport default memo(RegionNames)\n","import React, { memo, useCallback, useContext, useEffect, useRef } from 'react'\nimport { useFrame, useThree } from 'react-three-fiber'\nimport { useKillmails, useSolarSystems } from './hooks'\nimport * as THREE from 'three'\nimport { ThemeContext } from 'styled-components'\nimport { Text } from 'drei'\nimport { stringifyPrice } from './utils/formatting'\n\ntype TSThinksThisIsSvgLineTodoFix = any\n\n\ninterface TroikaTextObject {\n  text: string\n  position: THREE.Vector3\n  anchorX: number | 'left' | 'center' | 'right'\n  anchorY: number | 'top' | 'top-baseline' | 'middle' | 'bottom-baseline' | 'bottom'\n  fontSize: number\n}\n\nconst FocusIndicator: React.FC = () => {\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n  const regions = useSolarSystems(useCallback(state => state.regions, []))\n  const focusedKillmail = useRef<Killmail>()\n  const focusedSolarSystem = useRef<SolarSystem>()\n  const focusedRegion = useRef<Region>()\n  const theme = useContext(ThemeContext)\n  const lineRef = useRef<THREE.Line<THREE.BufferGeometry>>(null)\n  const textRef = useRef<TroikaTextObject>(null)\n\n  const { camera } = useThree()\n\n  useEffect(() => useKillmails.subscribe(state => {\n    focusedKillmail.current = state.focused\n    focusedSolarSystem.current = state.focused ? solarSystems[state.focused.solarSystemId] : undefined\n    focusedRegion.current = focusedSolarSystem.current ? regions[focusedSolarSystem.current.regionId] : undefined\n  }))\n\n  useFrame(() => {\n    let positions = new Float32Array(0)\n    let text = ''\n    let textX = 0\n    let textY = 0\n    let textZ = 0\n    let textAnchorX: TroikaTextObject['anchorX'] = 'left'\n    let textAnchorY: TroikaTextObject['anchorY'] = 'top'\n    let textSize = 0\n\n    if (focusedKillmail.current && focusedSolarSystem.current ) {\n      const { totalValue } = focusedKillmail.current\n      const { x, y, z, name } = focusedSolarSystem.current\n      const { x: cameraX, y: cameraY, z: cameraZ } = camera.position\n\n      const cameraZOffset = cameraZ - z\n\n      const lineOffset = cameraZOffset / 40\n\n      const offsetX = x > cameraX ? -lineOffset : lineOffset\n      const offsetY = y > cameraY ? -lineOffset : lineOffset\n\n      const offsetZ = lineOffset / 10\n\n      const xStart = x + offsetX\n      const yStart = y + offsetY\n      const zStart = z + offsetZ\n\n      const xHorizontalStart = xStart + offsetX * 5\n      const xHorizontalEnd = xHorizontalStart + offsetX * 5\n\n      const yHorizontal = yStart + offsetY * 3\n      const zHorizontal = zStart + offsetZ * 3\n\n      let locationName = name\n      if (focusedRegion.current) {\n        locationName = `${name}, ${focusedRegion.current.name}`\n      }\n\n      text = `${stringifyPrice(totalValue)} ${locationName}`\n      textX = xHorizontalStart\n      textY = yHorizontal\n      textZ = zHorizontal\n      textAnchorX = offsetX > 0 ? 'left' : 'right'\n      textAnchorY = offsetY > 0 ? 'bottom' : 'top'\n      textSize = cameraZOffset / 30\n\n      positions = new Float32Array([\n        xStart, yStart, zStart,\n        xHorizontalStart, yHorizontal, zHorizontal,\n        xHorizontalEnd, yHorizontal, zHorizontal\n      ])\n    }\n\n    if (lineRef.current) {\n      const { geometry } = lineRef.current\n\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.attributes.position.needsUpdate = true\n    }\n\n    if (textRef.current) {\n      const textObject = textRef.current\n      textObject.text = text\n      textObject.position.set(textX, textY, textZ)\n      textObject.anchorX = textAnchorX\n      textObject.anchorY = textAnchorY\n      textObject.fontSize = textSize\n    }\n  })\n\n  return <group>\n    <line ref={lineRef as TSThinksThisIsSvgLineTodoFix}>\n      <bufferGeometry attach='geometry' />\n      <meshBasicMaterial attach='material' color={theme.text} />\n    </line>\n    <Text ref={textRef} color={theme.text} fontSize={0} children='' />\n  </group>\n}\n\nexport default memo(FocusIndicator)\n","import round from 'lodash/round'\n\nconst thousand = 1_000\nconst million = thousand * thousand\nconst billion = million * thousand\nconst precision = 1\n\nconst displayBillionsFrom = billion / 2\nconst displayMillionsFrom = million / 2\n\nexport const stringifyPrice = (value: number): string => {\n  if (value > displayBillionsFrom) {\n    return `${round(value / billion, precision)}b`\n  } else if (value > displayMillionsFrom) {\n    return `${round(value / million, precision)}m`\n  } else {\n    return `${round(value / thousand, precision)}k`\n  }\n}\n","import React, { useRef, useEffect, useCallback, memo } from 'react'\nimport styled, { createGlobalStyle, ThemeProvider, ThemeContext } from 'styled-components'\nimport reset from 'styled-reset'\nimport { Canvas } from 'react-three-fiber'\nimport { theme } from './utils/theme'\nimport Stars from './Stars'\nimport Flares from './Flares'\nimport KillmailTicker from './KillmailTicker'\nimport { useKillmails, useSolarSystems, useConnectionStatus, useKillmailMonitor, useSolarSystemData } from './hooks'\nimport DevTools from './DevTools'\nimport Controls from './Controls'\nimport Camera from './Camera'\nimport sortBy from 'lodash/sortBy'\nimport reduce from 'lodash/reduce'\nimport Effects from './Effects'\nimport RegionNames from './RegionNames'\nimport FocusIndicator from './FocusIndicator'\n\nconst devMode = process.env.NODE_ENV === 'development'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset}\n\n  #root {\n    height: 100vh;\n    background: ${({ theme }) => theme.background};\n    overflow: hidden;\n  }\n\n  canvas {\n    outline: 0;\n  }\n`\n\nconst TopLeft = styled.div`\n  position: absolute;\n  top: 1vmin;\n  left: 1vmin;\n`\n\nconst TopRight = styled.div`\n  position: absolute;\n  top: 1vmin;\n  right: 1vmin;\n`\n\nconst Visuals: React.FC<{\n  solarSystems: Record<string, SolarSystem>\n  killmails: React.MutableRefObject<Killmail[]>\n}> = memo(({ solarSystems, killmails }) => {\n  return <Canvas onCreated={({ gl }) => gl.setClearColor(theme.background)}>\n    <ThemeContext.Provider value={theme}>\n      <ambientLight />\n\n      <Stars solarSystems={solarSystems} />\n      <Flares solarSystems={solarSystems} killmails={killmails} />\n      <RegionNames solarSystems={solarSystems} />\n      <FocusIndicator />\n\n      <Camera solarSystems={solarSystems} killmails={killmails} />\n\n      <Effects />\n    </ThemeContext.Provider>\n  </Canvas>\n})\n\nconst App: React.FC<{}> = () => {\n  useKillmailMonitor('wss://zkillboard.com/websocket/')\n  useSolarSystemData(process.env.PUBLIC_URL + '/data/universe.json')\n  useConnectionStatus()\n\n  const killmailsRef = useRef<Killmail[]>([])\n\n  const solarSystems = useSolarSystems(useCallback(state => state.systems, []))\n\n  const killmails = useKillmails(useCallback(state => {\n    const inCurrentSystems = reduce(state.killmails, (arr, km) => {\n      if (solarSystems[km.solarSystemId]) {\n        arr.push(km)\n      }\n      return arr\n    }, [] as Killmail[])\n    return sortBy(inCurrentSystems, 'receivedAt').reverse()\n  }, [solarSystems]))\n\n  useEffect(() => {\n    killmailsRef.current = killmails\n  }, [killmails])\n\n  return <ThemeProvider theme={theme}>\n    <GlobalStyle />\n\n    <Visuals solarSystems={solarSystems} killmails={killmailsRef} />\n\n    <TopLeft>\n      <KillmailTicker killmails={killmails} />\n    </TopLeft>\n\n    <TopRight>\n      <Controls />\n      {devMode && <DevTools />}\n    </TopRight>\n  </ThemeProvider>\n}\n\nexport default App;\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe, faList, faListAlt\n} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCompressArrowsAlt, faExpandArrowsAlt, faLink, faUnlink, faVideo, faGlobe, faList, faListAlt)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './utils/fontawesome'\n\nconst render = (Component: React.ComponentType<{}>)=> {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Component />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender(App)\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default\n    console.clear()\n    render(NextApp)\n  })\n}\n"],"sourceRoot":""}